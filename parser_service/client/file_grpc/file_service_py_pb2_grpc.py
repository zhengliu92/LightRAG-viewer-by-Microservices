# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from client.file_grpc import file_service_py_pb2 as proto_dot_file__service__py__pb2

GRPC_GENERATED_VERSION = "1.68.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in proto/file_service_py_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFilesUrl = channel.unary_unary(
            "/file_service.FileService/GetFilesUrl",
            request_serializer=proto_dot_file__service__py__pb2.GetFilesUrlRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.GetFilesUrlResponse.FromString,
            _registered_method=True,
        )
        self.Base64UploadFiles = channel.unary_unary(
            "/file_service.FileService/Base64UploadFiles",
            request_serializer=proto_dot_file__service__py__pb2.Base64UploadFilesRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.Base64UploadFilesResponse.FromString,
            _registered_method=True,
        )
        self.SaveStringToFile = channel.unary_unary(
            "/file_service.FileService/SaveStringToFile",
            request_serializer=proto_dot_file__service__py__pb2.SaveStringToFileRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.SaveStringToFileResponse.FromString,
            _registered_method=True,
        )
        self.UploadChunk = channel.unary_unary(
            "/file_service.FileService/UploadChunk",
            request_serializer=proto_dot_file__service__py__pb2.UploadChunkRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.UploadChunkResponse.FromString,
            _registered_method=True,
        )
        self.CompleteUpload = channel.unary_unary(
            "/file_service.FileService/CompleteUpload",
            request_serializer=proto_dot_file__service__py__pb2.CompleteUploadRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.CompleteUploadResponse.FromString,
            _registered_method=True,
        )
        self.GetFileBytes = channel.unary_unary(
            "/file_service.FileService/GetFileBytes",
            request_serializer=proto_dot_file__service__py__pb2.GetFileBytesRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.GetFileBytesResponse.FromString,
            _registered_method=True,
        )
        self.GetFileText = channel.unary_unary(
            "/file_service.FileService/GetFileText",
            request_serializer=proto_dot_file__service__py__pb2.GetFileTextRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.GetFileTextResponse.FromString,
            _registered_method=True,
        )
        self.DeleteFiles = channel.unary_unary(
            "/file_service.FileService/DeleteFiles",
            request_serializer=proto_dot_file__service__py__pb2.DeleteFilesRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.DeleteFilesResponse.FromString,
            _registered_method=True,
        )
        self.CreateBucket = channel.unary_unary(
            "/file_service.FileService/CreateBucket",
            request_serializer=proto_dot_file__service__py__pb2.CreateBucketRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.CreateBucketResponse.FromString,
            _registered_method=True,
        )
        self.BucketExists = channel.unary_unary(
            "/file_service.FileService/BucketExists",
            request_serializer=proto_dot_file__service__py__pb2.BucketExistsRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.BucketExistsResponse.FromString,
            _registered_method=True,
        )
        self.ListBucketFiles = channel.unary_unary(
            "/file_service.FileService/ListBucketFiles",
            request_serializer=proto_dot_file__service__py__pb2.ListBucketFilesRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.ListBucketFilesResponse.FromString,
            _registered_method=True,
        )
        self.NewFolderInBucket = channel.unary_unary(
            "/file_service.FileService/NewFolderInBucket",
            request_serializer=proto_dot_file__service__py__pb2.NewFolderInBucketRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.NewFolderInBucketResponse.FromString,
            _registered_method=True,
        )
        self.DeleteBucket = channel.unary_unary(
            "/file_service.FileService/DeleteBucket",
            request_serializer=proto_dot_file__service__py__pb2.DeleteBucketRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.DeleteBucketResponse.FromString,
            _registered_method=True,
        )
        self.IsObjectExists = channel.unary_unary(
            "/file_service.FileService/IsObjectExists",
            request_serializer=proto_dot_file__service__py__pb2.IsObjectExistsRequest.SerializeToString,
            response_deserializer=proto_dot_file__service__py__pb2.IsObjectExistsResponse.FromString,
            _registered_method=True,
        )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFilesUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Base64UploadFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SaveStringToFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UploadChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CompleteUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetFileBytes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetFileText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateBucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BucketExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListBucketFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def NewFolderInBucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteBucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IsObjectExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetFilesUrl": grpc.unary_unary_rpc_method_handler(
            servicer.GetFilesUrl,
            request_deserializer=proto_dot_file__service__py__pb2.GetFilesUrlRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.GetFilesUrlResponse.SerializeToString,
        ),
        "Base64UploadFiles": grpc.unary_unary_rpc_method_handler(
            servicer.Base64UploadFiles,
            request_deserializer=proto_dot_file__service__py__pb2.Base64UploadFilesRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.Base64UploadFilesResponse.SerializeToString,
        ),
        "SaveStringToFile": grpc.unary_unary_rpc_method_handler(
            servicer.SaveStringToFile,
            request_deserializer=proto_dot_file__service__py__pb2.SaveStringToFileRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.SaveStringToFileResponse.SerializeToString,
        ),
        "UploadChunk": grpc.unary_unary_rpc_method_handler(
            servicer.UploadChunk,
            request_deserializer=proto_dot_file__service__py__pb2.UploadChunkRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.UploadChunkResponse.SerializeToString,
        ),
        "CompleteUpload": grpc.unary_unary_rpc_method_handler(
            servicer.CompleteUpload,
            request_deserializer=proto_dot_file__service__py__pb2.CompleteUploadRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.CompleteUploadResponse.SerializeToString,
        ),
        "GetFileBytes": grpc.unary_unary_rpc_method_handler(
            servicer.GetFileBytes,
            request_deserializer=proto_dot_file__service__py__pb2.GetFileBytesRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.GetFileBytesResponse.SerializeToString,
        ),
        "GetFileText": grpc.unary_unary_rpc_method_handler(
            servicer.GetFileText,
            request_deserializer=proto_dot_file__service__py__pb2.GetFileTextRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.GetFileTextResponse.SerializeToString,
        ),
        "DeleteFiles": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteFiles,
            request_deserializer=proto_dot_file__service__py__pb2.DeleteFilesRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.DeleteFilesResponse.SerializeToString,
        ),
        "CreateBucket": grpc.unary_unary_rpc_method_handler(
            servicer.CreateBucket,
            request_deserializer=proto_dot_file__service__py__pb2.CreateBucketRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.CreateBucketResponse.SerializeToString,
        ),
        "BucketExists": grpc.unary_unary_rpc_method_handler(
            servicer.BucketExists,
            request_deserializer=proto_dot_file__service__py__pb2.BucketExistsRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.BucketExistsResponse.SerializeToString,
        ),
        "ListBucketFiles": grpc.unary_unary_rpc_method_handler(
            servicer.ListBucketFiles,
            request_deserializer=proto_dot_file__service__py__pb2.ListBucketFilesRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.ListBucketFilesResponse.SerializeToString,
        ),
        "NewFolderInBucket": grpc.unary_unary_rpc_method_handler(
            servicer.NewFolderInBucket,
            request_deserializer=proto_dot_file__service__py__pb2.NewFolderInBucketRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.NewFolderInBucketResponse.SerializeToString,
        ),
        "DeleteBucket": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteBucket,
            request_deserializer=proto_dot_file__service__py__pb2.DeleteBucketRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.DeleteBucketResponse.SerializeToString,
        ),
        "IsObjectExists": grpc.unary_unary_rpc_method_handler(
            servicer.IsObjectExists,
            request_deserializer=proto_dot_file__service__py__pb2.IsObjectExistsRequest.FromString,
            response_serializer=proto_dot_file__service__py__pb2.IsObjectExistsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "file_service.FileService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "file_service.FileService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFilesUrl(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/GetFilesUrl",
            proto_dot_file__service__py__pb2.GetFilesUrlRequest.SerializeToString,
            proto_dot_file__service__py__pb2.GetFilesUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Base64UploadFiles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/Base64UploadFiles",
            proto_dot_file__service__py__pb2.Base64UploadFilesRequest.SerializeToString,
            proto_dot_file__service__py__pb2.Base64UploadFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SaveStringToFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/SaveStringToFile",
            proto_dot_file__service__py__pb2.SaveStringToFileRequest.SerializeToString,
            proto_dot_file__service__py__pb2.SaveStringToFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UploadChunk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/UploadChunk",
            proto_dot_file__service__py__pb2.UploadChunkRequest.SerializeToString,
            proto_dot_file__service__py__pb2.UploadChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CompleteUpload(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/CompleteUpload",
            proto_dot_file__service__py__pb2.CompleteUploadRequest.SerializeToString,
            proto_dot_file__service__py__pb2.CompleteUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetFileBytes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/GetFileBytes",
            proto_dot_file__service__py__pb2.GetFileBytesRequest.SerializeToString,
            proto_dot_file__service__py__pb2.GetFileBytesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetFileText(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/GetFileText",
            proto_dot_file__service__py__pb2.GetFileTextRequest.SerializeToString,
            proto_dot_file__service__py__pb2.GetFileTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteFiles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/DeleteFiles",
            proto_dot_file__service__py__pb2.DeleteFilesRequest.SerializeToString,
            proto_dot_file__service__py__pb2.DeleteFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateBucket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/CreateBucket",
            proto_dot_file__service__py__pb2.CreateBucketRequest.SerializeToString,
            proto_dot_file__service__py__pb2.CreateBucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def BucketExists(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/BucketExists",
            proto_dot_file__service__py__pb2.BucketExistsRequest.SerializeToString,
            proto_dot_file__service__py__pb2.BucketExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListBucketFiles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/ListBucketFiles",
            proto_dot_file__service__py__pb2.ListBucketFilesRequest.SerializeToString,
            proto_dot_file__service__py__pb2.ListBucketFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def NewFolderInBucket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/NewFolderInBucket",
            proto_dot_file__service__py__pb2.NewFolderInBucketRequest.SerializeToString,
            proto_dot_file__service__py__pb2.NewFolderInBucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteBucket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/DeleteBucket",
            proto_dot_file__service__py__pb2.DeleteBucketRequest.SerializeToString,
            proto_dot_file__service__py__pb2.DeleteBucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def IsObjectExists(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/file_service.FileService/IsObjectExists",
            proto_dot_file__service__py__pb2.IsObjectExistsRequest.SerializeToString,
            proto_dot_file__service__py__pb2.IsObjectExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
