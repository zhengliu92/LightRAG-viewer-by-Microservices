// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: rpc_kb.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId                  string                 `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	KbFileCount              *int64                 `protobuf:"varint,4,opt,name=kb_file_count,json=kbFileCount,proto3,oneof" json:"kb_file_count,omitempty"` //preserve for compatibility
	KbFileBuildFinishedCount *int64                 `protobuf:"varint,5,opt,name=kb_file_build_finished_count,json=kbFileBuildFinishedCount,proto3,oneof" json:"kb_file_build_finished_count,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *KB) Reset() {
	*x = KB{}
	mi := &file_rpc_kb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KB) ProtoMessage() {}

func (x *KB) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KB.ProtoReflect.Descriptor instead.
func (*KB) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{0}
}

func (x *KB) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KB) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *KB) GetKbFileCount() int64 {
	if x != nil && x.KbFileCount != nil {
		return *x.KbFileCount
	}
	return 0
}

func (x *KB) GetKbFileBuildFinishedCount() int64 {
	if x != nil && x.KbFileBuildFinishedCount != nil {
		return *x.KbFileBuildFinishedCount
	}
	return 0
}

func (x *KB) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KB) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type KBFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path            string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Folder          string                 `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
	OwnerId         string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ParseStatus     string                 `protobuf:"bytes,6,opt,name=parse_status,json=parseStatus,proto3" json:"parse_status,omitempty"`
	ParsePercentage *float32               `protobuf:"fixed32,7,opt,name=parse_percentage,json=parsePercentage,proto3,oneof" json:"parse_percentage,omitempty"`
	IsParseFinished *bool                  `protobuf:"varint,8,opt,name=is_parse_finished,json=isParseFinished,proto3,oneof" json:"is_parse_finished,omitempty"`
	Size            *int64                 `protobuf:"varint,9,opt,name=size,proto3,oneof" json:"size,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *KBFile) Reset() {
	*x = KBFile{}
	mi := &file_rpc_kb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBFile) ProtoMessage() {}

func (x *KBFile) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBFile.ProtoReflect.Descriptor instead.
func (*KBFile) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{1}
}

func (x *KBFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KBFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KBFile) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *KBFile) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *KBFile) GetParseStatus() string {
	if x != nil {
		return x.ParseStatus
	}
	return ""
}

func (x *KBFile) GetParsePercentage() float32 {
	if x != nil && x.ParsePercentage != nil {
		return *x.ParsePercentage
	}
	return 0
}

func (x *KBFile) GetIsParseFinished() bool {
	if x != nil && x.IsParseFinished != nil {
		return *x.IsParseFinished
	}
	return false
}

func (x *KBFile) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *KBFile) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KBFile) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type KBFileWithKBMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path            string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Folder          string                 `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
	OwnerId         string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ParseStatus     string                 `protobuf:"bytes,6,opt,name=parse_status,json=parseStatus,proto3" json:"parse_status,omitempty"`
	ParsePercentage *float32               `protobuf:"fixed32,7,opt,name=parse_percentage,json=parsePercentage,proto3,oneof" json:"parse_percentage,omitempty"`
	IsParseFinished *bool                  `protobuf:"varint,8,opt,name=is_parse_finished,json=isParseFinished,proto3,oneof" json:"is_parse_finished,omitempty"`
	IsParseFailed   *bool                  `protobuf:"varint,9,opt,name=is_parse_failed,json=isParseFailed,proto3,oneof" json:"is_parse_failed,omitempty"`
	Size            *int64                 `protobuf:"varint,10,opt,name=size,proto3,oneof" json:"size,omitempty"`
	BuildStatus     string                 `protobuf:"bytes,11,opt,name=build_status,json=buildStatus,proto3" json:"build_status,omitempty"`
	BuildPercentage *float32               `protobuf:"fixed32,12,opt,name=build_percentage,json=buildPercentage,proto3,oneof" json:"build_percentage,omitempty"`
	IsBuildFinished *bool                  `protobuf:"varint,13,opt,name=is_build_finished,json=isBuildFinished,proto3,oneof" json:"is_build_finished,omitempty"`
	IsBuildFailed   *bool                  `protobuf:"varint,14,opt,name=is_build_failed,json=isBuildFailed,proto3,oneof" json:"is_build_failed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *KBFileWithKBMapping) Reset() {
	*x = KBFileWithKBMapping{}
	mi := &file_rpc_kb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBFileWithKBMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBFileWithKBMapping) ProtoMessage() {}

func (x *KBFileWithKBMapping) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBFileWithKBMapping.ProtoReflect.Descriptor instead.
func (*KBFileWithKBMapping) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{2}
}

func (x *KBFileWithKBMapping) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBFileWithKBMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KBFileWithKBMapping) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KBFileWithKBMapping) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *KBFileWithKBMapping) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *KBFileWithKBMapping) GetParseStatus() string {
	if x != nil {
		return x.ParseStatus
	}
	return ""
}

func (x *KBFileWithKBMapping) GetParsePercentage() float32 {
	if x != nil && x.ParsePercentage != nil {
		return *x.ParsePercentage
	}
	return 0
}

func (x *KBFileWithKBMapping) GetIsParseFinished() bool {
	if x != nil && x.IsParseFinished != nil {
		return *x.IsParseFinished
	}
	return false
}

func (x *KBFileWithKBMapping) GetIsParseFailed() bool {
	if x != nil && x.IsParseFailed != nil {
		return *x.IsParseFailed
	}
	return false
}

func (x *KBFileWithKBMapping) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *KBFileWithKBMapping) GetBuildStatus() string {
	if x != nil {
		return x.BuildStatus
	}
	return ""
}

func (x *KBFileWithKBMapping) GetBuildPercentage() float32 {
	if x != nil && x.BuildPercentage != nil {
		return *x.BuildPercentage
	}
	return 0
}

func (x *KBFileWithKBMapping) GetIsBuildFinished() bool {
	if x != nil && x.IsBuildFinished != nil {
		return *x.IsBuildFinished
	}
	return false
}

func (x *KBFileWithKBMapping) GetIsBuildFailed() bool {
	if x != nil && x.IsBuildFailed != nil {
		return *x.IsBuildFailed
	}
	return false
}

func (x *KBFileWithKBMapping) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KBFileWithKBMapping) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type KBWithKBFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId     string                 `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	KbFileCount *int64                 `protobuf:"varint,4,opt,name=kb_file_count,json=kbFileCount,proto3,oneof" json:"kb_file_count,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	KbFiles     []*KBFileWithKBMapping `protobuf:"bytes,7,rep,name=kb_files,json=kbFiles,proto3" json:"kb_files,omitempty"`
}

func (x *KBWithKBFiles) Reset() {
	*x = KBWithKBFiles{}
	mi := &file_rpc_kb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBWithKBFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBWithKBFiles) ProtoMessage() {}

func (x *KBWithKBFiles) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBWithKBFiles.ProtoReflect.Descriptor instead.
func (*KBWithKBFiles) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{3}
}

func (x *KBWithKBFiles) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBWithKBFiles) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KBWithKBFiles) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *KBWithKBFiles) GetKbFileCount() int64 {
	if x != nil && x.KbFileCount != nil {
		return *x.KbFileCount
	}
	return 0
}

func (x *KBWithKBFiles) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KBWithKBFiles) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KBWithKBFiles) GetKbFiles() []*KBFileWithKBMapping {
	if x != nil {
		return x.KbFiles
	}
	return nil
}

type KBBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KBBrief) Reset() {
	*x = KBBrief{}
	mi := &file_rpc_kb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBBrief) ProtoMessage() {}

func (x *KBBrief) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBBrief.ProtoReflect.Descriptor instead.
func (*KBBrief) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{4}
}

func (x *KBBrief) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBBrief) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type KBFileWithKBs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path            string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Folder          string                 `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
	OwnerId         string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ParseStatus     string                 `protobuf:"bytes,6,opt,name=parse_status,json=parseStatus,proto3" json:"parse_status,omitempty"`
	ParsePercentage *float32               `protobuf:"fixed32,7,opt,name=parse_percentage,json=parsePercentage,proto3,oneof" json:"parse_percentage,omitempty"`
	IsParseFinished *bool                  `protobuf:"varint,8,opt,name=is_parse_finished,json=isParseFinished,proto3,oneof" json:"is_parse_finished,omitempty"`
	IsParseFailed   *bool                  `protobuf:"varint,9,opt,name=is_parse_failed,json=isParseFailed,proto3,oneof" json:"is_parse_failed,omitempty"`
	Size            *int64                 `protobuf:"varint,10,opt,name=size,proto3,oneof" json:"size,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Kbs             []*KBBrief             `protobuf:"bytes,13,rep,name=kbs,proto3" json:"kbs,omitempty"`
}

func (x *KBFileWithKBs) Reset() {
	*x = KBFileWithKBs{}
	mi := &file_rpc_kb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBFileWithKBs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBFileWithKBs) ProtoMessage() {}

func (x *KBFileWithKBs) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBFileWithKBs.ProtoReflect.Descriptor instead.
func (*KBFileWithKBs) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{5}
}

func (x *KBFileWithKBs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBFileWithKBs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KBFileWithKBs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KBFileWithKBs) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *KBFileWithKBs) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *KBFileWithKBs) GetParseStatus() string {
	if x != nil {
		return x.ParseStatus
	}
	return ""
}

func (x *KBFileWithKBs) GetParsePercentage() float32 {
	if x != nil && x.ParsePercentage != nil {
		return *x.ParsePercentage
	}
	return 0
}

func (x *KBFileWithKBs) GetIsParseFinished() bool {
	if x != nil && x.IsParseFinished != nil {
		return *x.IsParseFinished
	}
	return false
}

func (x *KBFileWithKBs) GetIsParseFailed() bool {
	if x != nil && x.IsParseFailed != nil {
		return *x.IsParseFailed
	}
	return false
}

func (x *KBFileWithKBs) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *KBFileWithKBs) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KBFileWithKBs) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KBFileWithKBs) GetKbs() []*KBBrief {
	if x != nil {
		return x.Kbs
	}
	return nil
}

type CreateKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
}

func (x *CreateKBRequest) Reset() {
	*x = CreateKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKBRequest) ProtoMessage() {}

func (x *CreateKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKBRequest.ProtoReflect.Descriptor instead.
func (*CreateKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{6}
}

func (x *CreateKBRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKBRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type CreateKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateKBResponse) Reset() {
	*x = CreateKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKBResponse) ProtoMessage() {}

func (x *CreateKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKBResponse.ProtoReflect.Descriptor instead.
func (*CreateKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{7}
}

func (x *CreateKBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChangeKBNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChangeKBNameRequest) Reset() {
	*x = ChangeKBNameRequest{}
	mi := &file_rpc_kb_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeKBNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeKBNameRequest) ProtoMessage() {}

func (x *ChangeKBNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeKBNameRequest.ProtoReflect.Descriptor instead.
func (*ChangeKBNameRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeKBNameRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChangeKBNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ChangeKBNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangeKBNameResponse) Reset() {
	*x = ChangeKBNameResponse{}
	mi := &file_rpc_kb_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeKBNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeKBNameResponse) ProtoMessage() {}

func (x *ChangeKBNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeKBNameResponse.ProtoReflect.Descriptor instead.
func (*ChangeKBNameResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeKBNameResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetKBRequest) Reset() {
	*x = GetKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBRequest) ProtoMessage() {}

func (x *GetKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBRequest.ProtoReflect.Descriptor instead.
func (*GetKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{10}
}

func (x *GetKBRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeBase *KB `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
}

func (x *GetKBResponse) Reset() {
	*x = GetKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBResponse) ProtoMessage() {}

func (x *GetKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBResponse.ProtoReflect.Descriptor instead.
func (*GetKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{11}
}

func (x *GetKBResponse) GetKnowledgeBase() *KB {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type DeleteKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId   string  `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	ProjId *string `protobuf:"bytes,2,opt,name=proj_id,json=projId,proto3,oneof" json:"proj_id,omitempty"`
}

func (x *DeleteKBRequest) Reset() {
	*x = DeleteKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKBRequest) ProtoMessage() {}

func (x *DeleteKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKBRequest.ProtoReflect.Descriptor instead.
func (*DeleteKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteKBRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *DeleteKBRequest) GetProjId() string {
	if x != nil && x.ProjId != nil {
		return *x.ProjId
	}
	return ""
}

type DeleteKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteKBResponse) Reset() {
	*x = DeleteKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKBResponse) ProtoMessage() {}

func (x *DeleteKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKBResponse.ProtoReflect.Descriptor instead.
func (*DeleteKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteKBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetUserKBsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserKBsRequest) Reset() {
	*x = GetUserKBsRequest{}
	mi := &file_rpc_kb_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserKBsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKBsRequest) ProtoMessage() {}

func (x *GetUserKBsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKBsRequest.ProtoReflect.Descriptor instead.
func (*GetUserKBsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{14}
}

type GetUserKBsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kbs []*KB `protobuf:"bytes,1,rep,name=kbs,proto3" json:"kbs,omitempty"`
}

func (x *GetUserKBsResponse) Reset() {
	*x = GetUserKBsResponse{}
	mi := &file_rpc_kb_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserKBsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKBsResponse) ProtoMessage() {}

func (x *GetUserKBsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKBsResponse.ProtoReflect.Descriptor instead.
func (*GetUserKBsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserKBsResponse) GetKbs() []*KB {
	if x != nil {
		return x.Kbs
	}
	return nil
}

type CreateKBFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Folder string  `protobuf:"bytes,3,opt,name=folder,proto3" json:"folder,omitempty"`
	Size   int64   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	KbId   *string `protobuf:"bytes,5,opt,name=kb_id,json=kbId,proto3,oneof" json:"kb_id,omitempty"`
}

func (x *CreateKBFileRequest) Reset() {
	*x = CreateKBFileRequest{}
	mi := &file_rpc_kb_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKBFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKBFileRequest) ProtoMessage() {}

func (x *CreateKBFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKBFileRequest.ProtoReflect.Descriptor instead.
func (*CreateKBFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{16}
}

func (x *CreateKBFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKBFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateKBFileRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *CreateKBFileRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateKBFileRequest) GetKbId() string {
	if x != nil && x.KbId != nil {
		return *x.KbId
	}
	return ""
}

type CreateKBFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateKBFileResponse) Reset() {
	*x = CreateKBFileResponse{}
	mi := &file_rpc_kb_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKBFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKBFileResponse) ProtoMessage() {}

func (x *CreateKBFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKBFileResponse.ProtoReflect.Descriptor instead.
func (*CreateKBFileResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{17}
}

func (x *CreateKBFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateKBFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            *string  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Path            *string  `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Folder          *string  `protobuf:"bytes,4,opt,name=folder,proto3,oneof" json:"folder,omitempty"`
	OwnerId         *string  `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
	ParseStatus     *string  `protobuf:"bytes,6,opt,name=parse_status,json=parseStatus,proto3,oneof" json:"parse_status,omitempty"`
	ParsePercentage *float32 `protobuf:"fixed32,7,opt,name=parse_percentage,json=parsePercentage,proto3,oneof" json:"parse_percentage,omitempty"`
	IsParseFinished *bool    `protobuf:"varint,8,opt,name=is_parse_finished,json=isParseFinished,proto3,oneof" json:"is_parse_finished,omitempty"`
}

func (x *UpdateKBFileRequest) Reset() {
	*x = UpdateKBFileRequest{}
	mi := &file_rpc_kb_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKBFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKBFileRequest) ProtoMessage() {}

func (x *UpdateKBFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKBFileRequest.ProtoReflect.Descriptor instead.
func (*UpdateKBFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateKBFileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateKBFileRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateKBFileRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *UpdateKBFileRequest) GetFolder() string {
	if x != nil && x.Folder != nil {
		return *x.Folder
	}
	return ""
}

func (x *UpdateKBFileRequest) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *UpdateKBFileRequest) GetParseStatus() string {
	if x != nil && x.ParseStatus != nil {
		return *x.ParseStatus
	}
	return ""
}

func (x *UpdateKBFileRequest) GetParsePercentage() float32 {
	if x != nil && x.ParsePercentage != nil {
		return *x.ParsePercentage
	}
	return 0
}

func (x *UpdateKBFileRequest) GetIsParseFinished() bool {
	if x != nil && x.IsParseFinished != nil {
		return *x.IsParseFinished
	}
	return false
}

type UpdateKBFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateKBFileResponse) Reset() {
	*x = UpdateKBFileResponse{}
	mi := &file_rpc_kb_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKBFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKBFileResponse) ProtoMessage() {}

func (x *UpdateKBFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKBFileResponse.ProtoReflect.Descriptor instead.
func (*UpdateKBFileResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateKBFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetKBWithKBFilesByKBIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
}

func (x *GetKBWithKBFilesByKBIDRequest) Reset() {
	*x = GetKBWithKBFilesByKBIDRequest{}
	mi := &file_rpc_kb_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBWithKBFilesByKBIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBWithKBFilesByKBIDRequest) ProtoMessage() {}

func (x *GetKBWithKBFilesByKBIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBWithKBFilesByKBIDRequest.ProtoReflect.Descriptor instead.
func (*GetKBWithKBFilesByKBIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{20}
}

func (x *GetKBWithKBFilesByKBIDRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

type GetKBWithKBFilesByKBIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *KBWithKBFiles `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKBWithKBFilesByKBIDResponse) Reset() {
	*x = GetKBWithKBFilesByKBIDResponse{}
	mi := &file_rpc_kb_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBWithKBFilesByKBIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBWithKBFilesByKBIDResponse) ProtoMessage() {}

func (x *GetKBWithKBFilesByKBIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBWithKBFilesByKBIDResponse.ProtoReflect.Descriptor instead.
func (*GetKBWithKBFilesByKBIDResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{21}
}

func (x *GetKBWithKBFilesByKBIDResponse) GetData() *KBWithKBFiles {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetKBFilesByFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folder string `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *GetKBFilesByFolderRequest) Reset() {
	*x = GetKBFilesByFolderRequest{}
	mi := &file_rpc_kb_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBFilesByFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBFilesByFolderRequest) ProtoMessage() {}

func (x *GetKBFilesByFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBFilesByFolderRequest.ProtoReflect.Descriptor instead.
func (*GetKBFilesByFolderRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{22}
}

func (x *GetKBFilesByFolderRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type GetKBFilesByFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*KBFileWithKBs `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKBFilesByFolderResponse) Reset() {
	*x = GetKBFilesByFolderResponse{}
	mi := &file_rpc_kb_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBFilesByFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBFilesByFolderResponse) ProtoMessage() {}

func (x *GetKBFilesByFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBFilesByFolderResponse.ProtoReflect.Descriptor instead.
func (*GetKBFilesByFolderResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{23}
}

func (x *GetKBFilesByFolderResponse) GetData() []*KBFileWithKBs {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteKBFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIds []string `protobuf:"bytes,1,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
}

func (x *DeleteKBFilesRequest) Reset() {
	*x = DeleteKBFilesRequest{}
	mi := &file_rpc_kb_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKBFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKBFilesRequest) ProtoMessage() {}

func (x *DeleteKBFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKBFilesRequest.ProtoReflect.Descriptor instead.
func (*DeleteKBFilesRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteKBFilesRequest) GetFileIds() []string {
	if x != nil {
		return x.FileIds
	}
	return nil
}

type DeleteKBFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteKBFilesResponse) Reset() {
	*x = DeleteKBFilesResponse{}
	mi := &file_rpc_kb_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKBFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKBFilesResponse) ProtoMessage() {}

func (x *DeleteKBFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKBFilesResponse.ProtoReflect.Descriptor instead.
func (*DeleteKBFilesResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteKBFilesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddFileToKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId     string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	KbFileId string `protobuf:"bytes,2,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
}

func (x *AddFileToKBRequest) Reset() {
	*x = AddFileToKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFileToKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileToKBRequest) ProtoMessage() {}

func (x *AddFileToKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileToKBRequest.ProtoReflect.Descriptor instead.
func (*AddFileToKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{26}
}

func (x *AddFileToKBRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *AddFileToKBRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

type AddFileToKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddFileToKBResponse) Reset() {
	*x = AddFileToKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFileToKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileToKBResponse) ProtoMessage() {}

func (x *AddFileToKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileToKBResponse.ProtoReflect.Descriptor instead.
func (*AddFileToKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{27}
}

func (x *AddFileToKBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// File Asset messages
type FileFigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId    string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Section    string `protobuf:"bytes,3,opt,name=section,proto3" json:"section,omitempty"`
	KbFileId   string `protobuf:"bytes,4,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	Caption    string `protobuf:"bytes,5,opt,name=caption,proto3" json:"caption,omitempty"`
	ImgBytes   []byte `protobuf:"bytes,6,opt,name=img_bytes,json=imgBytes,proto3" json:"img_bytes,omitempty"`
	PageNumber *int32 `protobuf:"varint,7,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
}

func (x *FileFigure) Reset() {
	*x = FileFigure{}
	mi := &file_rpc_kb_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileFigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFigure) ProtoMessage() {}

func (x *FileFigure) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFigure.ProtoReflect.Descriptor instead.
func (*FileFigure) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{28}
}

func (x *FileFigure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileFigure) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *FileFigure) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *FileFigure) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *FileFigure) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *FileFigure) GetImgBytes() []byte {
	if x != nil {
		return x.ImgBytes
	}
	return nil
}

func (x *FileFigure) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

type FileText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId    string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	KbFileId   string `protobuf:"bytes,3,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	Text       string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Section    string `protobuf:"bytes,5,opt,name=section,proto3" json:"section,omitempty"`
	PageNumber *int32 `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
}

func (x *FileText) Reset() {
	*x = FileText{}
	mi := &file_rpc_kb_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileText) ProtoMessage() {}

func (x *FileText) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileText.ProtoReflect.Descriptor instead.
func (*FileText) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{29}
}

func (x *FileText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileText) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *FileText) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *FileText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FileText) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *FileText) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

type FileTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId    string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Section    string `protobuf:"bytes,3,opt,name=section,proto3" json:"section,omitempty"`
	KbFileId   string `protobuf:"bytes,4,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	TableHtml  string `protobuf:"bytes,5,opt,name=table_html,json=tableHtml,proto3" json:"table_html,omitempty"`
	Caption    string `protobuf:"bytes,6,opt,name=caption,proto3" json:"caption,omitempty"`
	PageNumber *int32 `protobuf:"varint,7,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
}

func (x *FileTable) Reset() {
	*x = FileTable{}
	mi := &file_rpc_kb_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTable) ProtoMessage() {}

func (x *FileTable) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTable.ProtoReflect.Descriptor instead.
func (*FileTable) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{30}
}

func (x *FileTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileTable) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *FileTable) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *FileTable) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *FileTable) GetTableHtml() string {
	if x != nil {
		return x.TableHtml
	}
	return ""
}

func (x *FileTable) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *FileTable) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

type CreateFileAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KbFileId string `protobuf:"bytes,2,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CreateFileAssetRequest) Reset() {
	*x = CreateFileAssetRequest{}
	mi := &file_rpc_kb_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileAssetRequest) ProtoMessage() {}

func (x *CreateFileAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileAssetRequest.ProtoReflect.Descriptor instead.
func (*CreateFileAssetRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{31}
}

func (x *CreateFileAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFileAssetRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *CreateFileAssetRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CreateFileAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateFileAssetResponse) Reset() {
	*x = CreateFileAssetResponse{}
	mi := &file_rpc_kb_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileAssetResponse) ProtoMessage() {}

func (x *CreateFileAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileAssetResponse.ProtoReflect.Descriptor instead.
func (*CreateFileAssetResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{32}
}

func (x *CreateFileAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetFileAssetsByKBFileIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbFileId string `protobuf:"bytes,1,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
}

func (x *GetFileAssetsByKBFileIDRequest) Reset() {
	*x = GetFileAssetsByKBFileIDRequest{}
	mi := &file_rpc_kb_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAssetsByKBFileIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAssetsByKBFileIDRequest) ProtoMessage() {}

func (x *GetFileAssetsByKBFileIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAssetsByKBFileIDRequest.ProtoReflect.Descriptor instead.
func (*GetFileAssetsByKBFileIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{33}
}

func (x *GetFileAssetsByKBFileIDRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

type GetFileAssetsByKBFileIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileTexts   []*FileText   `protobuf:"bytes,1,rep,name=file_texts,json=fileTexts,proto3" json:"file_texts,omitempty"`
	FileFigures []*FileFigure `protobuf:"bytes,2,rep,name=file_figures,json=fileFigures,proto3" json:"file_figures,omitempty"`
	FileTables  []*FileTable  `protobuf:"bytes,3,rep,name=file_tables,json=fileTables,proto3" json:"file_tables,omitempty"`
}

func (x *GetFileAssetsByKBFileIDResponse) Reset() {
	*x = GetFileAssetsByKBFileIDResponse{}
	mi := &file_rpc_kb_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAssetsByKBFileIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAssetsByKBFileIDResponse) ProtoMessage() {}

func (x *GetFileAssetsByKBFileIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAssetsByKBFileIDResponse.ProtoReflect.Descriptor instead.
func (*GetFileAssetsByKBFileIDResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{34}
}

func (x *GetFileAssetsByKBFileIDResponse) GetFileTexts() []*FileText {
	if x != nil {
		return x.FileTexts
	}
	return nil
}

func (x *GetFileAssetsByKBFileIDResponse) GetFileFigures() []*FileFigure {
	if x != nil {
		return x.FileFigures
	}
	return nil
}

func (x *GetFileAssetsByKBFileIDResponse) GetFileTables() []*FileTable {
	if x != nil {
		return x.FileTables
	}
	return nil
}

type DeleteFileAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFileAssetRequest) Reset() {
	*x = DeleteFileAssetRequest{}
	mi := &file_rpc_kb_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetRequest) ProtoMessage() {}

func (x *DeleteFileAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteFileAssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFileAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteFileAssetResponse) Reset() {
	*x = DeleteFileAssetResponse{}
	mi := &file_rpc_kb_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetResponse) ProtoMessage() {}

func (x *DeleteFileAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteFileAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteFileAssetByKBFileIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbFileId string `protobuf:"bytes,1,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
}

func (x *DeleteFileAssetByKBFileIDRequest) Reset() {
	*x = DeleteFileAssetByKBFileIDRequest{}
	mi := &file_rpc_kb_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetByKBFileIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetByKBFileIDRequest) ProtoMessage() {}

func (x *DeleteFileAssetByKBFileIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetByKBFileIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetByKBFileIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteFileAssetByKBFileIDRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

type DeleteFileAssetByKBFileIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteFileAssetByKBFileIDResponse) Reset() {
	*x = DeleteFileAssetByKBFileIDResponse{}
	mi := &file_rpc_kb_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetByKBFileIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetByKBFileIDResponse) ProtoMessage() {}

func (x *DeleteFileAssetByKBFileIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetByKBFileIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetByKBFileIDResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteFileAssetByKBFileIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteFileAssetByOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFileAssetByOwnerRequest) Reset() {
	*x = DeleteFileAssetByOwnerRequest{}
	mi := &file_rpc_kb_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetByOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetByOwnerRequest) ProtoMessage() {}

func (x *DeleteFileAssetByOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetByOwnerRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetByOwnerRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{39}
}

type DeleteFileAssetByOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteFileAssetByOwnerResponse) Reset() {
	*x = DeleteFileAssetByOwnerResponse{}
	mi := &file_rpc_kb_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileAssetByOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileAssetByOwnerResponse) ProtoMessage() {}

func (x *DeleteFileAssetByOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileAssetByOwnerResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileAssetByOwnerResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteFileAssetByOwnerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StartParseKBFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbFileId string `protobuf:"bytes,1,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
}

func (x *StartParseKBFileRequest) Reset() {
	*x = StartParseKBFileRequest{}
	mi := &file_rpc_kb_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartParseKBFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartParseKBFileRequest) ProtoMessage() {}

func (x *StartParseKBFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartParseKBFileRequest.ProtoReflect.Descriptor instead.
func (*StartParseKBFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{41}
}

func (x *StartParseKBFileRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

type StartParseKBFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartParseKBFileResponse) Reset() {
	*x = StartParseKBFileResponse{}
	mi := &file_rpc_kb_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartParseKBFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartParseKBFileResponse) ProtoMessage() {}

func (x *StartParseKBFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartParseKBFileResponse.ProtoReflect.Descriptor instead.
func (*StartParseKBFileResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{42}
}

func (x *StartParseKBFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StartBuildKBFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbFileId      string  `protobuf:"bytes,1,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	KbId          string  `protobuf:"bytes,2,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	ApiKey        string  `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ProjectApiKey *string `protobuf:"bytes,4,opt,name=project_api_key,json=projectApiKey,proto3,oneof" json:"project_api_key,omitempty"`
	ApiProvider   string  `protobuf:"bytes,5,opt,name=api_provider,json=apiProvider,proto3" json:"api_provider,omitempty"`
}

func (x *StartBuildKBFileRequest) Reset() {
	*x = StartBuildKBFileRequest{}
	mi := &file_rpc_kb_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBuildKBFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuildKBFileRequest) ProtoMessage() {}

func (x *StartBuildKBFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuildKBFileRequest.ProtoReflect.Descriptor instead.
func (*StartBuildKBFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{43}
}

func (x *StartBuildKBFileRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *StartBuildKBFileRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *StartBuildKBFileRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *StartBuildKBFileRequest) GetProjectApiKey() string {
	if x != nil && x.ProjectApiKey != nil {
		return *x.ProjectApiKey
	}
	return ""
}

func (x *StartBuildKBFileRequest) GetApiProvider() string {
	if x != nil {
		return x.ApiProvider
	}
	return ""
}

type StopBuildKBFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbFileId string `protobuf:"bytes,1,opt,name=kb_file_id,json=kbFileId,proto3" json:"kb_file_id,omitempty"`
	KbId     string `protobuf:"bytes,2,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
}

func (x *StopBuildKBFileRequest) Reset() {
	*x = StopBuildKBFileRequest{}
	mi := &file_rpc_kb_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopBuildKBFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBuildKBFileRequest) ProtoMessage() {}

func (x *StopBuildKBFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBuildKBFileRequest.ProtoReflect.Descriptor instead.
func (*StopBuildKBFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{44}
}

func (x *StopBuildKBFileRequest) GetKbFileId() string {
	if x != nil {
		return x.KbFileId
	}
	return ""
}

func (x *StopBuildKBFileRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

type StopBuildKBFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopBuildKBFileResponse) Reset() {
	*x = StopBuildKBFileResponse{}
	mi := &file_rpc_kb_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopBuildKBFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBuildKBFileResponse) ProtoMessage() {}

func (x *StopBuildKBFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBuildKBFileResponse.ProtoReflect.Descriptor instead.
func (*StopBuildKBFileResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{45}
}

func (x *StopBuildKBFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StartBuildKBFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartBuildKBFileResponse) Reset() {
	*x = StartBuildKBFileResponse{}
	mi := &file_rpc_kb_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBuildKBFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuildKBFileResponse) ProtoMessage() {}

func (x *StartBuildKBFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuildKBFileResponse.ProtoReflect.Descriptor instead.
func (*StartBuildKBFileResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{46}
}

func (x *StartBuildKBFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetFigureByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFigureByIDRequest) Reset() {
	*x = GetFigureByIDRequest{}
	mi := &file_rpc_kb_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFigureByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFigureByIDRequest) ProtoMessage() {}

func (x *GetFigureByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFigureByIDRequest.ProtoReflect.Descriptor instead.
func (*GetFigureByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{47}
}

func (x *GetFigureByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFigureByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figure []byte `protobuf:"bytes,1,opt,name=figure,proto3" json:"figure,omitempty"`
}

func (x *GetFigureByIDResponse) Reset() {
	*x = GetFigureByIDResponse{}
	mi := &file_rpc_kb_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFigureByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFigureByIDResponse) ProtoMessage() {}

func (x *GetFigureByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFigureByIDResponse.ProtoReflect.Descriptor instead.
func (*GetFigureByIDResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{48}
}

func (x *GetFigureByIDResponse) GetFigure() []byte {
	if x != nil {
		return x.Figure
	}
	return nil
}

type UpsertRagConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId                  string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	ChunkTokenSize        int32  `protobuf:"varint,2,opt,name=chunk_token_size,json=chunkTokenSize,proto3" json:"chunk_token_size,omitempty"`
	ChunkOverlapTokenSize int32  `protobuf:"varint,3,opt,name=chunk_overlap_token_size,json=chunkOverlapTokenSize,proto3" json:"chunk_overlap_token_size,omitempty"`
	EmbedModel            string `protobuf:"bytes,4,opt,name=embed_model,json=embedModel,proto3" json:"embed_model,omitempty"`
}

func (x *UpsertRagConfigRequest) Reset() {
	*x = UpsertRagConfigRequest{}
	mi := &file_rpc_kb_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRagConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRagConfigRequest) ProtoMessage() {}

func (x *UpsertRagConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRagConfigRequest.ProtoReflect.Descriptor instead.
func (*UpsertRagConfigRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{49}
}

func (x *UpsertRagConfigRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *UpsertRagConfigRequest) GetChunkTokenSize() int32 {
	if x != nil {
		return x.ChunkTokenSize
	}
	return 0
}

func (x *UpsertRagConfigRequest) GetChunkOverlapTokenSize() int32 {
	if x != nil {
		return x.ChunkOverlapTokenSize
	}
	return 0
}

func (x *UpsertRagConfigRequest) GetEmbedModel() string {
	if x != nil {
		return x.EmbedModel
	}
	return ""
}

type UpsertRagConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpsertRagConfigResponse) Reset() {
	*x = UpsertRagConfigResponse{}
	mi := &file_rpc_kb_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRagConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRagConfigResponse) ProtoMessage() {}

func (x *UpsertRagConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRagConfigResponse.ProtoReflect.Descriptor instead.
func (*UpsertRagConfigResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{50}
}

func (x *UpsertRagConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRagConfigByKBIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
}

func (x *GetRagConfigByKBIDRequest) Reset() {
	*x = GetRagConfigByKBIDRequest{}
	mi := &file_rpc_kb_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRagConfigByKBIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRagConfigByKBIDRequest) ProtoMessage() {}

func (x *GetRagConfigByKBIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRagConfigByKBIDRequest.ProtoReflect.Descriptor instead.
func (*GetRagConfigByKBIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{51}
}

func (x *GetRagConfigByKBIDRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

type GetRagConfigByKBIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkTokenSize        int32  `protobuf:"varint,1,opt,name=chunk_token_size,json=chunkTokenSize,proto3" json:"chunk_token_size,omitempty"`
	ChunkOverlapTokenSize int32  `protobuf:"varint,2,opt,name=chunk_overlap_token_size,json=chunkOverlapTokenSize,proto3" json:"chunk_overlap_token_size,omitempty"`
	EmbedModel            string `protobuf:"bytes,3,opt,name=embed_model,json=embedModel,proto3" json:"embed_model,omitempty"`
}

func (x *GetRagConfigByKBIDResponse) Reset() {
	*x = GetRagConfigByKBIDResponse{}
	mi := &file_rpc_kb_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRagConfigByKBIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRagConfigByKBIDResponse) ProtoMessage() {}

func (x *GetRagConfigByKBIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRagConfigByKBIDResponse.ProtoReflect.Descriptor instead.
func (*GetRagConfigByKBIDResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{52}
}

func (x *GetRagConfigByKBIDResponse) GetChunkTokenSize() int32 {
	if x != nil {
		return x.ChunkTokenSize
	}
	return 0
}

func (x *GetRagConfigByKBIDResponse) GetChunkOverlapTokenSize() int32 {
	if x != nil {
		return x.ChunkOverlapTokenSize
	}
	return 0
}

func (x *GetRagConfigByKBIDResponse) GetEmbedModel() string {
	if x != nil {
		return x.EmbedModel
	}
	return ""
}

type StartBuildKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
}

func (x *StartBuildKBRequest) Reset() {
	*x = StartBuildKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBuildKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuildKBRequest) ProtoMessage() {}

func (x *StartBuildKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuildKBRequest.ProtoReflect.Descriptor instead.
func (*StartBuildKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{53}
}

func (x *StartBuildKBRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

type StartBuildKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartBuildKBResponse) Reset() {
	*x = StartBuildKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBuildKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuildKBResponse) ProtoMessage() {}

func (x *StartBuildKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuildKBResponse.ProtoReflect.Descriptor instead.
func (*StartBuildKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{54}
}

func (x *StartBuildKBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ParseAndBuildKBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId          string  `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	ApiKey        string  `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ProjectApiKey *string `protobuf:"bytes,3,opt,name=project_api_key,json=projectApiKey,proto3,oneof" json:"project_api_key,omitempty"`
	ApiProvider   string  `protobuf:"bytes,4,opt,name=api_provider,json=apiProvider,proto3" json:"api_provider,omitempty"`
}

func (x *ParseAndBuildKBRequest) Reset() {
	*x = ParseAndBuildKBRequest{}
	mi := &file_rpc_kb_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseAndBuildKBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseAndBuildKBRequest) ProtoMessage() {}

func (x *ParseAndBuildKBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseAndBuildKBRequest.ProtoReflect.Descriptor instead.
func (*ParseAndBuildKBRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{55}
}

func (x *ParseAndBuildKBRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *ParseAndBuildKBRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ParseAndBuildKBRequest) GetProjectApiKey() string {
	if x != nil && x.ProjectApiKey != nil {
		return *x.ProjectApiKey
	}
	return ""
}

func (x *ParseAndBuildKBRequest) GetApiProvider() string {
	if x != nil {
		return x.ApiProvider
	}
	return ""
}

type ParseAndBuildKBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ParseAndBuildKBResponse) Reset() {
	*x = ParseAndBuildKBResponse{}
	mi := &file_rpc_kb_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseAndBuildKBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseAndBuildKBResponse) ProtoMessage() {}

func (x *ParseAndBuildKBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseAndBuildKBResponse.ProtoReflect.Descriptor instead.
func (*ParseAndBuildKBResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{56}
}

func (x *ParseAndBuildKBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type KBFigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Score   float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *KBFigure) Reset() {
	*x = KBFigure{}
	mi := &file_rpc_kb_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBFigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBFigure) ProtoMessage() {}

func (x *KBFigure) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBFigure.ProtoReflect.Descriptor instead.
func (*KBFigure) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{57}
}

func (x *KBFigure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBFigure) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *KBFigure) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type KBTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score     float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Content   string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	TableHtml string  `protobuf:"bytes,4,opt,name=table_html,json=tableHtml,proto3" json:"table_html,omitempty"`
}

func (x *KBTable) Reset() {
	*x = KBTable{}
	mi := &file_rpc_kb_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBTable) ProtoMessage() {}

func (x *KBTable) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBTable.ProtoReflect.Descriptor instead.
func (*KBTable) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{58}
}

func (x *KBTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBTable) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *KBTable) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *KBTable) GetTableHtml() string {
	if x != nil {
		return x.TableHtml
	}
	return ""
}

type QueryKBFiguresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId          string  `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	MessageId     string  `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Query         string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	ApiKey        string  `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ProjectApiKey *string `protobuf:"bytes,5,opt,name=project_api_key,json=projectApiKey,proto3,oneof" json:"project_api_key,omitempty"`
	ApiProvider   string  `protobuf:"bytes,6,opt,name=api_provider,json=apiProvider,proto3" json:"api_provider,omitempty"`
	Temperature   float32 `protobuf:"fixed32,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Threshold     float32 `protobuf:"fixed32,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	TopN          int32   `protobuf:"varint,9,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
}

func (x *QueryKBFiguresRequest) Reset() {
	*x = QueryKBFiguresRequest{}
	mi := &file_rpc_kb_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBFiguresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBFiguresRequest) ProtoMessage() {}

func (x *QueryKBFiguresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBFiguresRequest.ProtoReflect.Descriptor instead.
func (*QueryKBFiguresRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{59}
}

func (x *QueryKBFiguresRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetProjectApiKey() string {
	if x != nil && x.ProjectApiKey != nil {
		return *x.ProjectApiKey
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetApiProvider() string {
	if x != nil {
		return x.ApiProvider
	}
	return ""
}

func (x *QueryKBFiguresRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *QueryKBFiguresRequest) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *QueryKBFiguresRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

type QueryKBFiguresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figures []*FileFigure `protobuf:"bytes,1,rep,name=figures,proto3" json:"figures,omitempty"`
}

func (x *QueryKBFiguresResponse) Reset() {
	*x = QueryKBFiguresResponse{}
	mi := &file_rpc_kb_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBFiguresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBFiguresResponse) ProtoMessage() {}

func (x *QueryKBFiguresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBFiguresResponse.ProtoReflect.Descriptor instead.
func (*QueryKBFiguresResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{60}
}

func (x *QueryKBFiguresResponse) GetFigures() []*FileFigure {
	if x != nil {
		return x.Figures
	}
	return nil
}

type QueryKBTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId          string  `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	MessageId     string  `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Query         string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	ApiKey        string  `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ProjectApiKey *string `protobuf:"bytes,5,opt,name=project_api_key,json=projectApiKey,proto3,oneof" json:"project_api_key,omitempty"`
	ApiProvider   string  `protobuf:"bytes,6,opt,name=api_provider,json=apiProvider,proto3" json:"api_provider,omitempty"`
	Temperature   float32 `protobuf:"fixed32,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Threshold     float32 `protobuf:"fixed32,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	TopN          int32   `protobuf:"varint,9,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
}

func (x *QueryKBTablesRequest) Reset() {
	*x = QueryKBTablesRequest{}
	mi := &file_rpc_kb_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBTablesRequest) ProtoMessage() {}

func (x *QueryKBTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBTablesRequest.ProtoReflect.Descriptor instead.
func (*QueryKBTablesRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{61}
}

func (x *QueryKBTablesRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *QueryKBTablesRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *QueryKBTablesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryKBTablesRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *QueryKBTablesRequest) GetProjectApiKey() string {
	if x != nil && x.ProjectApiKey != nil {
		return *x.ProjectApiKey
	}
	return ""
}

func (x *QueryKBTablesRequest) GetApiProvider() string {
	if x != nil {
		return x.ApiProvider
	}
	return ""
}

func (x *QueryKBTablesRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *QueryKBTablesRequest) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *QueryKBTablesRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

type QueryKBTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*KBTable `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *QueryKBTablesResponse) Reset() {
	*x = QueryKBTablesResponse{}
	mi := &file_rpc_kb_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBTablesResponse) ProtoMessage() {}

func (x *QueryKBTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBTablesResponse.ProtoReflect.Descriptor instead.
func (*QueryKBTablesResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{62}
}

func (x *QueryKBTablesResponse) GetTables() []*KBTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

type QueryKBContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId  string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QueryKBContextRequest) Reset() {
	*x = QueryKBContextRequest{}
	mi := &file_rpc_kb_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBContextRequest) ProtoMessage() {}

func (x *QueryKBContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBContextRequest.ProtoReflect.Descriptor instead.
func (*QueryKBContextRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{63}
}

func (x *QueryKBContextRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

func (x *QueryKBContextRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type QueryKBContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntitiesContext  []string `protobuf:"bytes,1,rep,name=entities_context,json=entitiesContext,proto3" json:"entities_context,omitempty"`
	RelationsContext []string `protobuf:"bytes,2,rep,name=relations_context,json=relationsContext,proto3" json:"relations_context,omitempty"`
	TextUnitsContext []string `protobuf:"bytes,3,rep,name=text_units_context,json=textUnitsContext,proto3" json:"text_units_context,omitempty"`
}

func (x *QueryKBContextResponse) Reset() {
	*x = QueryKBContextResponse{}
	mi := &file_rpc_kb_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKBContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKBContextResponse) ProtoMessage() {}

func (x *QueryKBContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKBContextResponse.ProtoReflect.Descriptor instead.
func (*QueryKBContextResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{64}
}

func (x *QueryKBContextResponse) GetEntitiesContext() []string {
	if x != nil {
		return x.EntitiesContext
	}
	return nil
}

func (x *QueryKBContextResponse) GetRelationsContext() []string {
	if x != nil {
		return x.RelationsContext
	}
	return nil
}

func (x *QueryKBContextResponse) GetTextUnitsContext() []string {
	if x != nil {
		return x.TextUnitsContext
	}
	return nil
}

type KBGraphNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType  string `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	SourceId    string `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *KBGraphNode) Reset() {
	*x = KBGraphNode{}
	mi := &file_rpc_kb_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBGraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBGraphNode) ProtoMessage() {}

func (x *KBGraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBGraphNode.ProtoReflect.Descriptor instead.
func (*KBGraphNode) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{65}
}

func (x *KBGraphNode) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *KBGraphNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KBGraphNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KBGraphNode) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type KBGraphEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target      string  `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Keywords    string  `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Weight      float32 `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	SourceId    string  `protobuf:"bytes,6,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *KBGraphEdge) Reset() {
	*x = KBGraphEdge{}
	mi := &file_rpc_kb_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KBGraphEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KBGraphEdge) ProtoMessage() {}

func (x *KBGraphEdge) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KBGraphEdge.ProtoReflect.Descriptor instead.
func (*KBGraphEdge) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{66}
}

func (x *KBGraphEdge) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *KBGraphEdge) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *KBGraphEdge) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *KBGraphEdge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KBGraphEdge) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *KBGraphEdge) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type GetKBGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId string `protobuf:"bytes,1,opt,name=kb_id,json=kbId,proto3" json:"kb_id,omitempty"`
}

func (x *GetKBGraphRequest) Reset() {
	*x = GetKBGraphRequest{}
	mi := &file_rpc_kb_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBGraphRequest) ProtoMessage() {}

func (x *GetKBGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBGraphRequest.ProtoReflect.Descriptor instead.
func (*GetKBGraphRequest) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{67}
}

func (x *GetKBGraphRequest) GetKbId() string {
	if x != nil {
		return x.KbId
	}
	return ""
}

type GetKBGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*KBGraphNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges []*KBGraphEdge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *GetKBGraphResponse) Reset() {
	*x = GetKBGraphResponse{}
	mi := &file_rpc_kb_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKBGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKBGraphResponse) ProtoMessage() {}

func (x *GetKBGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_kb_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKBGraphResponse.ProtoReflect.Descriptor instead.
func (*GetKBGraphResponse) Descriptor() ([]byte, []int) {
	return file_rpc_kb_proto_rawDescGZIP(), []int{68}
}

func (x *GetKBGraphResponse) GetNodes() []*KBGraphNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetKBGraphResponse) GetEdges() []*KBGraphEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

var File_rpc_kb_proto protoreflect.FileDescriptor

var file_rpc_kb_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x70, 0x63, 0x5f, 0x6b, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xda, 0x02, 0x0a, 0x02, 0x4b, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x62, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x18, 0x6b, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xba, 0x03, 0x0a, 0x06, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf8, 0x05,
	0x0a, 0x13, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x4b, 0x42, 0x57,
	0x69, 0x74, 0x68, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x62, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6b, 0x62, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d,
	0x0a, 0x07, 0x4b, 0x42, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x04,
	0x0a, 0x0d, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x62,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x52, 0x03, 0x6b, 0x62, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4b, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x42,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b, 0x42, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x42, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6a, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x42, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x42, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x03, 0x6b, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x52, 0x03, 0x6b, 0x62, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x03,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x42, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x42, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4b, 0x42, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x4b, 0x42, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x4b, 0x42, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x4b, 0x42, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x42, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x6f, 0x4b, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4b, 0x42, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69,
	0x6d, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb7, 0x01,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4b,
	0x42, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79,
	0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x40, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x3d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x62, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x33, 0x0a,
	0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x30, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x79, 0x4b, 0x42, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x62, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4b, 0x42, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2a, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x62, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4b, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41,
	0x6e, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x33, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4b, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x4b, 0x42, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x68, 0x0a, 0x07, 0x4b, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x22, 0xb3, 0x02,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x42, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x22, 0x42, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x42, 0x46, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x07, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x42, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9e,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x42, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x7d, 0x0a, 0x0b, 0x4b, 0x42, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x0b, 0x4b, 0x42, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x42, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4b, 0x42, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x42, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x42,
	0x14, 0x5a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_kb_proto_rawDescOnce sync.Once
	file_rpc_kb_proto_rawDescData = file_rpc_kb_proto_rawDesc
)

func file_rpc_kb_proto_rawDescGZIP() []byte {
	file_rpc_kb_proto_rawDescOnce.Do(func() {
		file_rpc_kb_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_kb_proto_rawDescData)
	})
	return file_rpc_kb_proto_rawDescData
}

var file_rpc_kb_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_rpc_kb_proto_goTypes = []any{
	(*KB)(nil),                                // 0: pb.KB
	(*KBFile)(nil),                            // 1: pb.KBFile
	(*KBFileWithKBMapping)(nil),               // 2: pb.KBFileWithKBMapping
	(*KBWithKBFiles)(nil),                     // 3: pb.KBWithKBFiles
	(*KBBrief)(nil),                           // 4: pb.KBBrief
	(*KBFileWithKBs)(nil),                     // 5: pb.KBFileWithKBs
	(*CreateKBRequest)(nil),                   // 6: pb.CreateKBRequest
	(*CreateKBResponse)(nil),                  // 7: pb.CreateKBResponse
	(*ChangeKBNameRequest)(nil),               // 8: pb.ChangeKBNameRequest
	(*ChangeKBNameResponse)(nil),              // 9: pb.ChangeKBNameResponse
	(*GetKBRequest)(nil),                      // 10: pb.GetKBRequest
	(*GetKBResponse)(nil),                     // 11: pb.GetKBResponse
	(*DeleteKBRequest)(nil),                   // 12: pb.DeleteKBRequest
	(*DeleteKBResponse)(nil),                  // 13: pb.DeleteKBResponse
	(*GetUserKBsRequest)(nil),                 // 14: pb.GetUserKBsRequest
	(*GetUserKBsResponse)(nil),                // 15: pb.GetUserKBsResponse
	(*CreateKBFileRequest)(nil),               // 16: pb.CreateKBFileRequest
	(*CreateKBFileResponse)(nil),              // 17: pb.CreateKBFileResponse
	(*UpdateKBFileRequest)(nil),               // 18: pb.UpdateKBFileRequest
	(*UpdateKBFileResponse)(nil),              // 19: pb.UpdateKBFileResponse
	(*GetKBWithKBFilesByKBIDRequest)(nil),     // 20: pb.GetKBWithKBFilesByKBIDRequest
	(*GetKBWithKBFilesByKBIDResponse)(nil),    // 21: pb.GetKBWithKBFilesByKBIDResponse
	(*GetKBFilesByFolderRequest)(nil),         // 22: pb.GetKBFilesByFolderRequest
	(*GetKBFilesByFolderResponse)(nil),        // 23: pb.GetKBFilesByFolderResponse
	(*DeleteKBFilesRequest)(nil),              // 24: pb.DeleteKBFilesRequest
	(*DeleteKBFilesResponse)(nil),             // 25: pb.DeleteKBFilesResponse
	(*AddFileToKBRequest)(nil),                // 26: pb.AddFileToKBRequest
	(*AddFileToKBResponse)(nil),               // 27: pb.AddFileToKBResponse
	(*FileFigure)(nil),                        // 28: pb.FileFigure
	(*FileText)(nil),                          // 29: pb.FileText
	(*FileTable)(nil),                         // 30: pb.FileTable
	(*CreateFileAssetRequest)(nil),            // 31: pb.CreateFileAssetRequest
	(*CreateFileAssetResponse)(nil),           // 32: pb.CreateFileAssetResponse
	(*GetFileAssetsByKBFileIDRequest)(nil),    // 33: pb.GetFileAssetsByKBFileIDRequest
	(*GetFileAssetsByKBFileIDResponse)(nil),   // 34: pb.GetFileAssetsByKBFileIDResponse
	(*DeleteFileAssetRequest)(nil),            // 35: pb.DeleteFileAssetRequest
	(*DeleteFileAssetResponse)(nil),           // 36: pb.DeleteFileAssetResponse
	(*DeleteFileAssetByKBFileIDRequest)(nil),  // 37: pb.DeleteFileAssetByKBFileIDRequest
	(*DeleteFileAssetByKBFileIDResponse)(nil), // 38: pb.DeleteFileAssetByKBFileIDResponse
	(*DeleteFileAssetByOwnerRequest)(nil),     // 39: pb.DeleteFileAssetByOwnerRequest
	(*DeleteFileAssetByOwnerResponse)(nil),    // 40: pb.DeleteFileAssetByOwnerResponse
	(*StartParseKBFileRequest)(nil),           // 41: pb.StartParseKBFileRequest
	(*StartParseKBFileResponse)(nil),          // 42: pb.StartParseKBFileResponse
	(*StartBuildKBFileRequest)(nil),           // 43: pb.StartBuildKBFileRequest
	(*StopBuildKBFileRequest)(nil),            // 44: pb.StopBuildKBFileRequest
	(*StopBuildKBFileResponse)(nil),           // 45: pb.StopBuildKBFileResponse
	(*StartBuildKBFileResponse)(nil),          // 46: pb.StartBuildKBFileResponse
	(*GetFigureByIDRequest)(nil),              // 47: pb.GetFigureByIDRequest
	(*GetFigureByIDResponse)(nil),             // 48: pb.GetFigureByIDResponse
	(*UpsertRagConfigRequest)(nil),            // 49: pb.UpsertRagConfigRequest
	(*UpsertRagConfigResponse)(nil),           // 50: pb.UpsertRagConfigResponse
	(*GetRagConfigByKBIDRequest)(nil),         // 51: pb.GetRagConfigByKBIDRequest
	(*GetRagConfigByKBIDResponse)(nil),        // 52: pb.GetRagConfigByKBIDResponse
	(*StartBuildKBRequest)(nil),               // 53: pb.StartBuildKBRequest
	(*StartBuildKBResponse)(nil),              // 54: pb.StartBuildKBResponse
	(*ParseAndBuildKBRequest)(nil),            // 55: pb.ParseAndBuildKBRequest
	(*ParseAndBuildKBResponse)(nil),           // 56: pb.ParseAndBuildKBResponse
	(*KBFigure)(nil),                          // 57: pb.KBFigure
	(*KBTable)(nil),                           // 58: pb.KBTable
	(*QueryKBFiguresRequest)(nil),             // 59: pb.QueryKBFiguresRequest
	(*QueryKBFiguresResponse)(nil),            // 60: pb.QueryKBFiguresResponse
	(*QueryKBTablesRequest)(nil),              // 61: pb.QueryKBTablesRequest
	(*QueryKBTablesResponse)(nil),             // 62: pb.QueryKBTablesResponse
	(*QueryKBContextRequest)(nil),             // 63: pb.QueryKBContextRequest
	(*QueryKBContextResponse)(nil),            // 64: pb.QueryKBContextResponse
	(*KBGraphNode)(nil),                       // 65: pb.KBGraphNode
	(*KBGraphEdge)(nil),                       // 66: pb.KBGraphEdge
	(*GetKBGraphRequest)(nil),                 // 67: pb.GetKBGraphRequest
	(*GetKBGraphResponse)(nil),                // 68: pb.GetKBGraphResponse
	(*timestamppb.Timestamp)(nil),             // 69: google.protobuf.Timestamp
}
var file_rpc_kb_proto_depIdxs = []int32{
	69, // 0: pb.KB.created_at:type_name -> google.protobuf.Timestamp
	69, // 1: pb.KB.updated_at:type_name -> google.protobuf.Timestamp
	69, // 2: pb.KBFile.created_at:type_name -> google.protobuf.Timestamp
	69, // 3: pb.KBFile.updated_at:type_name -> google.protobuf.Timestamp
	69, // 4: pb.KBFileWithKBMapping.created_at:type_name -> google.protobuf.Timestamp
	69, // 5: pb.KBFileWithKBMapping.updated_at:type_name -> google.protobuf.Timestamp
	69, // 6: pb.KBWithKBFiles.created_at:type_name -> google.protobuf.Timestamp
	69, // 7: pb.KBWithKBFiles.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 8: pb.KBWithKBFiles.kb_files:type_name -> pb.KBFileWithKBMapping
	69, // 9: pb.KBFileWithKBs.created_at:type_name -> google.protobuf.Timestamp
	69, // 10: pb.KBFileWithKBs.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 11: pb.KBFileWithKBs.kbs:type_name -> pb.KBBrief
	0,  // 12: pb.GetKBResponse.knowledge_base:type_name -> pb.KB
	0,  // 13: pb.GetUserKBsResponse.kbs:type_name -> pb.KB
	3,  // 14: pb.GetKBWithKBFilesByKBIDResponse.data:type_name -> pb.KBWithKBFiles
	5,  // 15: pb.GetKBFilesByFolderResponse.data:type_name -> pb.KBFileWithKBs
	29, // 16: pb.GetFileAssetsByKBFileIDResponse.file_texts:type_name -> pb.FileText
	28, // 17: pb.GetFileAssetsByKBFileIDResponse.file_figures:type_name -> pb.FileFigure
	30, // 18: pb.GetFileAssetsByKBFileIDResponse.file_tables:type_name -> pb.FileTable
	28, // 19: pb.QueryKBFiguresResponse.figures:type_name -> pb.FileFigure
	58, // 20: pb.QueryKBTablesResponse.tables:type_name -> pb.KBTable
	65, // 21: pb.GetKBGraphResponse.nodes:type_name -> pb.KBGraphNode
	66, // 22: pb.GetKBGraphResponse.edges:type_name -> pb.KBGraphEdge
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_rpc_kb_proto_init() }
func file_rpc_kb_proto_init() {
	if File_rpc_kb_proto != nil {
		return
	}
	file_rpc_kb_proto_msgTypes[0].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[1].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[2].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[3].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[5].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[6].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[12].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[16].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[18].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[28].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[29].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[30].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[43].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[55].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[59].OneofWrappers = []any{}
	file_rpc_kb_proto_msgTypes[61].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_kb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_kb_proto_goTypes,
		DependencyIndexes: file_rpc_kb_proto_depIdxs,
		MessageInfos:      file_rpc_kb_proto_msgTypes,
	}.Build()
	File_rpc_kb_proto = out.File
	file_rpc_kb_proto_rawDesc = nil
	file_rpc_kb_proto_goTypes = nil
	file_rpc_kb_proto_depIdxs = nil
}
