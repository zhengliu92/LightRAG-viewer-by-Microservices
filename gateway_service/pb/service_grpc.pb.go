// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_LoginUser_FullMethodName                 = "/pb.GatewayService/LoginUser"
	GatewayService_LogoutUser_FullMethodName                = "/pb.GatewayService/LogoutUser"
	GatewayService_CreateUser_FullMethodName                = "/pb.GatewayService/CreateUser"
	GatewayService_CreateRole_FullMethodName                = "/pb.GatewayService/CreateRole"
	GatewayService_GetAllRoles_FullMethodName               = "/pb.GatewayService/GetAllRoles"
	GatewayService_DeleteRole_FullMethodName                = "/pb.GatewayService/DeleteRole"
	GatewayService_ActivateUser_FullMethodName              = "/pb.GatewayService/ActivateUser"
	GatewayService_DeactivateUser_FullMethodName            = "/pb.GatewayService/DeactivateUser"
	GatewayService_UpdateUser_FullMethodName                = "/pb.GatewayService/UpdateUser"
	GatewayService_GetUserMe_FullMethodName                 = "/pb.GatewayService/GetUserMe"
	GatewayService_RenewAccessToken_FullMethodName          = "/pb.GatewayService/RenewAccessToken"
	GatewayService_GetUserByID_FullMethodName               = "/pb.GatewayService/GetUserByID"
	GatewayService_GetUserByEmail_FullMethodName            = "/pb.GatewayService/GetUserByEmail"
	GatewayService_GetFileBytes_FullMethodName              = "/pb.GatewayService/GetFileBytes"
	GatewayService_Base64UploadFiles_FullMethodName         = "/pb.GatewayService/Base64UploadFiles"
	GatewayService_UploadChunk_FullMethodName               = "/pb.GatewayService/UploadChunk"
	GatewayService_CompleteUpload_FullMethodName            = "/pb.GatewayService/CompleteUpload"
	GatewayService_DeleteFiles_FullMethodName               = "/pb.GatewayService/DeleteFiles"
	GatewayService_CreateBucket_FullMethodName              = "/pb.GatewayService/CreateBucket"
	GatewayService_ListBucketFiles_FullMethodName           = "/pb.GatewayService/ListBucketFiles"
	GatewayService_DeleteBucket_FullMethodName              = "/pb.GatewayService/DeleteBucket"
	GatewayService_NewFolderInBucket_FullMethodName         = "/pb.GatewayService/NewFolderInBucket"
	GatewayService_CreateKB_FullMethodName                  = "/pb.GatewayService/CreateKB"
	GatewayService_GetUserKBs_FullMethodName                = "/pb.GatewayService/GetUserKBs"
	GatewayService_ChangeKBName_FullMethodName              = "/pb.GatewayService/ChangeKBName"
	GatewayService_DeleteKB_FullMethodName                  = "/pb.GatewayService/DeleteKB"
	GatewayService_CreateKBFile_FullMethodName              = "/pb.GatewayService/CreateKBFile"
	GatewayService_UpdateKBFile_FullMethodName              = "/pb.GatewayService/UpdateKBFile"
	GatewayService_GetKBFilesByFolder_FullMethodName        = "/pb.GatewayService/GetKBFilesByFolder"
	GatewayService_GetKBWithKBFilesByKBID_FullMethodName    = "/pb.GatewayService/GetKBWithKBFilesByKBID"
	GatewayService_DeleteKBFiles_FullMethodName             = "/pb.GatewayService/DeleteKBFiles"
	GatewayService_AddFileToKB_FullMethodName               = "/pb.GatewayService/AddFileToKB"
	GatewayService_StartParseKBFile_FullMethodName          = "/pb.GatewayService/StartParseKBFile"
	GatewayService_StartBuildKBFile_FullMethodName          = "/pb.GatewayService/StartBuildKBFile"
	GatewayService_StopBuildKBFile_FullMethodName           = "/pb.GatewayService/StopBuildKBFile"
	GatewayService_CreateFileAsset_FullMethodName           = "/pb.GatewayService/CreateFileAsset"
	GatewayService_DeleteFileAsset_FullMethodName           = "/pb.GatewayService/DeleteFileAsset"
	GatewayService_DeleteFileAssetByKBFileID_FullMethodName = "/pb.GatewayService/DeleteFileAssetByKBFileID"
	GatewayService_DeleteFileAssetByOwner_FullMethodName    = "/pb.GatewayService/DeleteFileAssetByOwner"
	GatewayService_GetFileAssetsByKBFileID_FullMethodName   = "/pb.GatewayService/GetFileAssetsByKBFileID"
	GatewayService_GetFigureByID_FullMethodName             = "/pb.GatewayService/GetFigureByID"
	GatewayService_UpsertRagConfig_FullMethodName           = "/pb.GatewayService/UpsertRagConfig"
	GatewayService_GetRagConfigByKBID_FullMethodName        = "/pb.GatewayService/GetRagConfigByKBID"
	GatewayService_ParseAndBuildKB_FullMethodName           = "/pb.GatewayService/ParseAndBuildKB"
	GatewayService_QueryKBFigures_FullMethodName            = "/pb.GatewayService/QueryKBFigures"
	GatewayService_QueryKBTables_FullMethodName             = "/pb.GatewayService/QueryKBTables"
	GatewayService_QueryKBContext_FullMethodName            = "/pb.GatewayService/QueryKBContext"
	GatewayService_GetKBGraph_FullMethodName                = "/pb.GatewayService/GetKBGraph"
	GatewayService_UnlinkKBDocument_FullMethodName          = "/pb.GatewayService/UnlinkKBDocument"
	GatewayService_CreateProject_FullMethodName             = "/pb.GatewayService/CreateProject"
	GatewayService_AddUserToProject_FullMethodName          = "/pb.GatewayService/AddUserToProject"
	GatewayService_RemoveUserFromProject_FullMethodName     = "/pb.GatewayService/RemoveUserFromProject"
	GatewayService_AddKBToProject_FullMethodName            = "/pb.GatewayService/AddKBToProject"
	GatewayService_RemoveKBFromProject_FullMethodName       = "/pb.GatewayService/RemoveKBFromProject"
	GatewayService_RenameProject_FullMethodName             = "/pb.GatewayService/RenameProject"
	GatewayService_DeleteProject_FullMethodName             = "/pb.GatewayService/DeleteProject"
	GatewayService_GetUserProjectsWithKBs_FullMethodName    = "/pb.GatewayService/GetUserProjectsWithKBs"
	GatewayService_ListUsersWithProjects_FullMethodName     = "/pb.GatewayService/ListUsersWithProjects"
	GatewayService_GetProjectWithUsersAndKBs_FullMethodName = "/pb.GatewayService/GetProjectWithUsersAndKBs"
	GatewayService_ListProjects_FullMethodName              = "/pb.GatewayService/ListProjects"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	GetAllRoles(ctx context.Context, in *GetAllRolesRequest, opts ...grpc.CallOption) (*GetAllRolesResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error)
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	GetUserMe(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error)
	RenewAccessToken(ctx context.Context, in *RenewAccessTokenRequest, opts ...grpc.CallOption) (*RenewAccessTokenResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error)
	GetFileBytes(ctx context.Context, in *GetFileBytesRequest, opts ...grpc.CallOption) (*GetFileBytesResponse, error)
	Base64UploadFiles(ctx context.Context, in *Base64UploadFilesRequest, opts ...grpc.CallOption) (*Base64UploadFilesResponse, error)
	UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error)
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	ListBucketFiles(ctx context.Context, in *ListBucketFilesRequest, opts ...grpc.CallOption) (*ListBucketFilesResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	NewFolderInBucket(ctx context.Context, in *NewFolderInBucketRequest, opts ...grpc.CallOption) (*NewFolderInBucketResponse, error)
	// Knowledge Base operations
	CreateKB(ctx context.Context, in *CreateKBRequest, opts ...grpc.CallOption) (*CreateKBResponse, error)
	GetUserKBs(ctx context.Context, in *GetUserKBsRequest, opts ...grpc.CallOption) (*GetUserKBsResponse, error)
	ChangeKBName(ctx context.Context, in *ChangeKBNameRequest, opts ...grpc.CallOption) (*ChangeKBNameResponse, error)
	DeleteKB(ctx context.Context, in *DeleteKBRequest, opts ...grpc.CallOption) (*DeleteKBResponse, error)
	// KB File operations
	CreateKBFile(ctx context.Context, in *CreateKBFileRequest, opts ...grpc.CallOption) (*CreateKBFileResponse, error)
	UpdateKBFile(ctx context.Context, in *UpdateKBFileRequest, opts ...grpc.CallOption) (*UpdateKBFileResponse, error)
	GetKBFilesByFolder(ctx context.Context, in *GetKBFilesByFolderRequest, opts ...grpc.CallOption) (*GetKBFilesByFolderResponse, error)
	GetKBWithKBFilesByKBID(ctx context.Context, in *GetKBWithKBFilesByKBIDRequest, opts ...grpc.CallOption) (*GetKBWithKBFilesByKBIDResponse, error)
	DeleteKBFiles(ctx context.Context, in *DeleteKBFilesRequest, opts ...grpc.CallOption) (*DeleteKBFilesResponse, error)
	AddFileToKB(ctx context.Context, in *AddFileToKBRequest, opts ...grpc.CallOption) (*AddFileToKBResponse, error)
	StartParseKBFile(ctx context.Context, in *StartParseKBFileRequest, opts ...grpc.CallOption) (*StartParseKBFileResponse, error)
	StartBuildKBFile(ctx context.Context, in *StartBuildKBFileRequest, opts ...grpc.CallOption) (*StartBuildKBFileResponse, error)
	StopBuildKBFile(ctx context.Context, in *StopBuildKBFileRequest, opts ...grpc.CallOption) (*StopBuildKBFileResponse, error)
	// File Asset operations
	CreateFileAsset(ctx context.Context, in *CreateFileAssetRequest, opts ...grpc.CallOption) (*CreateFileAssetResponse, error)
	DeleteFileAsset(ctx context.Context, in *DeleteFileAssetRequest, opts ...grpc.CallOption) (*DeleteFileAssetResponse, error)
	DeleteFileAssetByKBFileID(ctx context.Context, in *DeleteFileAssetByKBFileIDRequest, opts ...grpc.CallOption) (*DeleteFileAssetByKBFileIDResponse, error)
	DeleteFileAssetByOwner(ctx context.Context, in *DeleteFileAssetByOwnerRequest, opts ...grpc.CallOption) (*DeleteFileAssetByOwnerResponse, error)
	GetFileAssetsByKBFileID(ctx context.Context, in *GetFileAssetsByKBFileIDRequest, opts ...grpc.CallOption) (*GetFileAssetsByKBFileIDResponse, error)
	GetFigureByID(ctx context.Context, in *GetFigureByIDRequest, opts ...grpc.CallOption) (*GetFigureByIDResponse, error)
	UpsertRagConfig(ctx context.Context, in *UpsertRagConfigRequest, opts ...grpc.CallOption) (*UpsertRagConfigResponse, error)
	GetRagConfigByKBID(ctx context.Context, in *GetRagConfigByKBIDRequest, opts ...grpc.CallOption) (*GetRagConfigByKBIDResponse, error)
	ParseAndBuildKB(ctx context.Context, in *ParseAndBuildKBRequest, opts ...grpc.CallOption) (*ParseAndBuildKBResponse, error)
	QueryKBFigures(ctx context.Context, in *QueryKBFiguresRequest, opts ...grpc.CallOption) (*QueryKBFiguresResponse, error)
	QueryKBTables(ctx context.Context, in *QueryKBTablesRequest, opts ...grpc.CallOption) (*QueryKBTablesResponse, error)
	QueryKBContext(ctx context.Context, in *QueryKBContextRequest, opts ...grpc.CallOption) (*QueryKBContextResponse, error)
	GetKBGraph(ctx context.Context, in *GetKBGraphRequest, opts ...grpc.CallOption) (*GetKBGraphResponse, error)
	UnlinkKBDocument(ctx context.Context, in *UnlinkKBDocumentRequest, opts ...grpc.CallOption) (*UnlinkKBDocumentResponse, error)
	// Project operations
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error)
	RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*RemoveUserFromProjectResponse, error)
	AddKBToProject(ctx context.Context, in *AddKBToProjectRequest, opts ...grpc.CallOption) (*AddKBToProjectResponse, error)
	RemoveKBFromProject(ctx context.Context, in *RemoveKBFromProjectRequest, opts ...grpc.CallOption) (*RemoveKBFromProjectResponse, error)
	RenameProject(ctx context.Context, in *RenameProjectRequest, opts ...grpc.CallOption) (*RenameProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	GetUserProjectsWithKBs(ctx context.Context, in *GetUserProjectsWithKBsRequest, opts ...grpc.CallOption) (*GetUserProjectsWithKBsResponse, error)
	ListUsersWithProjects(ctx context.Context, in *ListUsersWithProjectsRequest, opts ...grpc.CallOption) (*ListUsersWithProjectsResponse, error)
	GetProjectWithUsersAndKBs(ctx context.Context, in *GetProjectWithUsersAndKBsRequest, opts ...grpc.CallOption) (*GetProjectWithUsersAndKBsResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_LogoutUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetAllRoles(ctx context.Context, in *GetAllRolesRequest, opts ...grpc.CallOption) (*GetAllRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRolesResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetAllRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_ActivateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeactivateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserMe(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RenewAccessToken(ctx context.Context, in *RenewAccessTokenRequest, opts ...grpc.CallOption) (*RenewAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewAccessTokenResponse)
	err := c.cc.Invoke(ctx, GatewayService_RenewAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByEmailResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetFileBytes(ctx context.Context, in *GetFileBytesRequest, opts ...grpc.CallOption) (*GetFileBytesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileBytesResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetFileBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Base64UploadFiles(ctx context.Context, in *Base64UploadFilesRequest, opts ...grpc.CallOption) (*Base64UploadFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Base64UploadFilesResponse)
	err := c.cc.Invoke(ctx, GatewayService_Base64UploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadChunkResponse)
	err := c.cc.Invoke(ctx, GatewayService_UploadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, GatewayService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFilesResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListBucketFiles(ctx context.Context, in *ListBucketFilesRequest, opts ...grpc.CallOption) (*ListBucketFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketFilesResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListBucketFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) NewFolderInBucket(ctx context.Context, in *NewFolderInBucketRequest, opts ...grpc.CallOption) (*NewFolderInBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewFolderInBucketResponse)
	err := c.cc.Invoke(ctx, GatewayService_NewFolderInBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateKB(ctx context.Context, in *CreateKBRequest, opts ...grpc.CallOption) (*CreateKBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKBResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateKB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserKBs(ctx context.Context, in *GetUserKBsRequest, opts ...grpc.CallOption) (*GetUserKBsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserKBsResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserKBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ChangeKBName(ctx context.Context, in *ChangeKBNameRequest, opts ...grpc.CallOption) (*ChangeKBNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeKBNameResponse)
	err := c.cc.Invoke(ctx, GatewayService_ChangeKBName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteKB(ctx context.Context, in *DeleteKBRequest, opts ...grpc.CallOption) (*DeleteKBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKBResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteKB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateKBFile(ctx context.Context, in *CreateKBFileRequest, opts ...grpc.CallOption) (*CreateKBFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKBFileResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateKBFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateKBFile(ctx context.Context, in *UpdateKBFileRequest, opts ...grpc.CallOption) (*UpdateKBFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKBFileResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpdateKBFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetKBFilesByFolder(ctx context.Context, in *GetKBFilesByFolderRequest, opts ...grpc.CallOption) (*GetKBFilesByFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKBFilesByFolderResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetKBFilesByFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetKBWithKBFilesByKBID(ctx context.Context, in *GetKBWithKBFilesByKBIDRequest, opts ...grpc.CallOption) (*GetKBWithKBFilesByKBIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKBWithKBFilesByKBIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetKBWithKBFilesByKBID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteKBFiles(ctx context.Context, in *DeleteKBFilesRequest, opts ...grpc.CallOption) (*DeleteKBFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKBFilesResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteKBFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddFileToKB(ctx context.Context, in *AddFileToKBRequest, opts ...grpc.CallOption) (*AddFileToKBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFileToKBResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddFileToKB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) StartParseKBFile(ctx context.Context, in *StartParseKBFileRequest, opts ...grpc.CallOption) (*StartParseKBFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartParseKBFileResponse)
	err := c.cc.Invoke(ctx, GatewayService_StartParseKBFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) StartBuildKBFile(ctx context.Context, in *StartBuildKBFileRequest, opts ...grpc.CallOption) (*StartBuildKBFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartBuildKBFileResponse)
	err := c.cc.Invoke(ctx, GatewayService_StartBuildKBFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) StopBuildKBFile(ctx context.Context, in *StopBuildKBFileRequest, opts ...grpc.CallOption) (*StopBuildKBFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopBuildKBFileResponse)
	err := c.cc.Invoke(ctx, GatewayService_StopBuildKBFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateFileAsset(ctx context.Context, in *CreateFileAssetRequest, opts ...grpc.CallOption) (*CreateFileAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileAssetResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateFileAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteFileAsset(ctx context.Context, in *DeleteFileAssetRequest, opts ...grpc.CallOption) (*DeleteFileAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileAssetResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteFileAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteFileAssetByKBFileID(ctx context.Context, in *DeleteFileAssetByKBFileIDRequest, opts ...grpc.CallOption) (*DeleteFileAssetByKBFileIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileAssetByKBFileIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteFileAssetByKBFileID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteFileAssetByOwner(ctx context.Context, in *DeleteFileAssetByOwnerRequest, opts ...grpc.CallOption) (*DeleteFileAssetByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileAssetByOwnerResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteFileAssetByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetFileAssetsByKBFileID(ctx context.Context, in *GetFileAssetsByKBFileIDRequest, opts ...grpc.CallOption) (*GetFileAssetsByKBFileIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileAssetsByKBFileIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetFileAssetsByKBFileID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetFigureByID(ctx context.Context, in *GetFigureByIDRequest, opts ...grpc.CallOption) (*GetFigureByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFigureByIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetFigureByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpsertRagConfig(ctx context.Context, in *UpsertRagConfigRequest, opts ...grpc.CallOption) (*UpsertRagConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertRagConfigResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpsertRagConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetRagConfigByKBID(ctx context.Context, in *GetRagConfigByKBIDRequest, opts ...grpc.CallOption) (*GetRagConfigByKBIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRagConfigByKBIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetRagConfigByKBID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ParseAndBuildKB(ctx context.Context, in *ParseAndBuildKBRequest, opts ...grpc.CallOption) (*ParseAndBuildKBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseAndBuildKBResponse)
	err := c.cc.Invoke(ctx, GatewayService_ParseAndBuildKB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) QueryKBFigures(ctx context.Context, in *QueryKBFiguresRequest, opts ...grpc.CallOption) (*QueryKBFiguresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKBFiguresResponse)
	err := c.cc.Invoke(ctx, GatewayService_QueryKBFigures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) QueryKBTables(ctx context.Context, in *QueryKBTablesRequest, opts ...grpc.CallOption) (*QueryKBTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKBTablesResponse)
	err := c.cc.Invoke(ctx, GatewayService_QueryKBTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) QueryKBContext(ctx context.Context, in *QueryKBContextRequest, opts ...grpc.CallOption) (*QueryKBContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKBContextResponse)
	err := c.cc.Invoke(ctx, GatewayService_QueryKBContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetKBGraph(ctx context.Context, in *GetKBGraphRequest, opts ...grpc.CallOption) (*GetKBGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKBGraphResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetKBGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UnlinkKBDocument(ctx context.Context, in *UnlinkKBDocumentRequest, opts ...grpc.CallOption) (*UnlinkKBDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkKBDocumentResponse)
	err := c.cc.Invoke(ctx, GatewayService_UnlinkKBDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddUserToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*RemoveUserFromProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_RemoveUserFromProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddKBToProject(ctx context.Context, in *AddKBToProjectRequest, opts ...grpc.CallOption) (*AddKBToProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddKBToProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddKBToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveKBFromProject(ctx context.Context, in *RemoveKBFromProjectRequest, opts ...grpc.CallOption) (*RemoveKBFromProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveKBFromProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_RemoveKBFromProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RenameProject(ctx context.Context, in *RenameProjectRequest, opts ...grpc.CallOption) (*RenameProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_RenameProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserProjectsWithKBs(ctx context.Context, in *GetUserProjectsWithKBsRequest, opts ...grpc.CallOption) (*GetUserProjectsWithKBsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProjectsWithKBsResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserProjectsWithKBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListUsersWithProjects(ctx context.Context, in *ListUsersWithProjectsRequest, opts ...grpc.CallOption) (*ListUsersWithProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersWithProjectsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListUsersWithProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetProjectWithUsersAndKBs(ctx context.Context, in *GetProjectWithUsersAndKBsRequest, opts ...grpc.CallOption) (*GetProjectWithUsersAndKBsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectWithUsersAndKBsResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetProjectWithUsersAndKBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
type GatewayServiceServer interface {
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	GetAllRoles(context.Context, *GetAllRolesRequest) (*GetAllRolesResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error)
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	GetUserMe(context.Context, *MeRequest) (*MeResponse, error)
	RenewAccessToken(context.Context, *RenewAccessTokenRequest) (*RenewAccessTokenResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error)
	GetFileBytes(context.Context, *GetFileBytesRequest) (*GetFileBytesResponse, error)
	Base64UploadFiles(context.Context, *Base64UploadFilesRequest) (*Base64UploadFilesResponse, error)
	UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error)
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	ListBucketFiles(context.Context, *ListBucketFilesRequest) (*ListBucketFilesResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	NewFolderInBucket(context.Context, *NewFolderInBucketRequest) (*NewFolderInBucketResponse, error)
	// Knowledge Base operations
	CreateKB(context.Context, *CreateKBRequest) (*CreateKBResponse, error)
	GetUserKBs(context.Context, *GetUserKBsRequest) (*GetUserKBsResponse, error)
	ChangeKBName(context.Context, *ChangeKBNameRequest) (*ChangeKBNameResponse, error)
	DeleteKB(context.Context, *DeleteKBRequest) (*DeleteKBResponse, error)
	// KB File operations
	CreateKBFile(context.Context, *CreateKBFileRequest) (*CreateKBFileResponse, error)
	UpdateKBFile(context.Context, *UpdateKBFileRequest) (*UpdateKBFileResponse, error)
	GetKBFilesByFolder(context.Context, *GetKBFilesByFolderRequest) (*GetKBFilesByFolderResponse, error)
	GetKBWithKBFilesByKBID(context.Context, *GetKBWithKBFilesByKBIDRequest) (*GetKBWithKBFilesByKBIDResponse, error)
	DeleteKBFiles(context.Context, *DeleteKBFilesRequest) (*DeleteKBFilesResponse, error)
	AddFileToKB(context.Context, *AddFileToKBRequest) (*AddFileToKBResponse, error)
	StartParseKBFile(context.Context, *StartParseKBFileRequest) (*StartParseKBFileResponse, error)
	StartBuildKBFile(context.Context, *StartBuildKBFileRequest) (*StartBuildKBFileResponse, error)
	StopBuildKBFile(context.Context, *StopBuildKBFileRequest) (*StopBuildKBFileResponse, error)
	// File Asset operations
	CreateFileAsset(context.Context, *CreateFileAssetRequest) (*CreateFileAssetResponse, error)
	DeleteFileAsset(context.Context, *DeleteFileAssetRequest) (*DeleteFileAssetResponse, error)
	DeleteFileAssetByKBFileID(context.Context, *DeleteFileAssetByKBFileIDRequest) (*DeleteFileAssetByKBFileIDResponse, error)
	DeleteFileAssetByOwner(context.Context, *DeleteFileAssetByOwnerRequest) (*DeleteFileAssetByOwnerResponse, error)
	GetFileAssetsByKBFileID(context.Context, *GetFileAssetsByKBFileIDRequest) (*GetFileAssetsByKBFileIDResponse, error)
	GetFigureByID(context.Context, *GetFigureByIDRequest) (*GetFigureByIDResponse, error)
	UpsertRagConfig(context.Context, *UpsertRagConfigRequest) (*UpsertRagConfigResponse, error)
	GetRagConfigByKBID(context.Context, *GetRagConfigByKBIDRequest) (*GetRagConfigByKBIDResponse, error)
	ParseAndBuildKB(context.Context, *ParseAndBuildKBRequest) (*ParseAndBuildKBResponse, error)
	QueryKBFigures(context.Context, *QueryKBFiguresRequest) (*QueryKBFiguresResponse, error)
	QueryKBTables(context.Context, *QueryKBTablesRequest) (*QueryKBTablesResponse, error)
	QueryKBContext(context.Context, *QueryKBContextRequest) (*QueryKBContextResponse, error)
	GetKBGraph(context.Context, *GetKBGraphRequest) (*GetKBGraphResponse, error)
	UnlinkKBDocument(context.Context, *UnlinkKBDocumentRequest) (*UnlinkKBDocumentResponse, error)
	// Project operations
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error)
	RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*RemoveUserFromProjectResponse, error)
	AddKBToProject(context.Context, *AddKBToProjectRequest) (*AddKBToProjectResponse, error)
	RemoveKBFromProject(context.Context, *RemoveKBFromProjectRequest) (*RemoveKBFromProjectResponse, error)
	RenameProject(context.Context, *RenameProjectRequest) (*RenameProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	GetUserProjectsWithKBs(context.Context, *GetUserProjectsWithKBsRequest) (*GetUserProjectsWithKBsResponse, error)
	ListUsersWithProjects(context.Context, *ListUsersWithProjectsRequest) (*ListUsersWithProjectsResponse, error)
	GetProjectWithUsersAndKBs(context.Context, *GetProjectWithUsersAndKBsRequest) (*GetProjectWithUsersAndKBsResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGatewayServiceServer) LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedGatewayServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGatewayServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedGatewayServiceServer) GetAllRoles(context.Context, *GetAllRolesRequest) (*GetAllRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedGatewayServiceServer) ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedGatewayServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedGatewayServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserMe(context.Context, *MeRequest) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMe not implemented")
}
func (UnimplementedGatewayServiceServer) RenewAccessToken(context.Context, *RenewAccessTokenRequest) (*RenewAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewAccessToken not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedGatewayServiceServer) GetFileBytes(context.Context, *GetFileBytesRequest) (*GetFileBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBytes not implemented")
}
func (UnimplementedGatewayServiceServer) Base64UploadFiles(context.Context, *Base64UploadFilesRequest) (*Base64UploadFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Base64UploadFiles not implemented")
}
func (UnimplementedGatewayServiceServer) UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedGatewayServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedGatewayServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedGatewayServiceServer) ListBucketFiles(context.Context, *ListBucketFilesRequest) (*ListBucketFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketFiles not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedGatewayServiceServer) NewFolderInBucket(context.Context, *NewFolderInBucketRequest) (*NewFolderInBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFolderInBucket not implemented")
}
func (UnimplementedGatewayServiceServer) CreateKB(context.Context, *CreateKBRequest) (*CreateKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKB not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserKBs(context.Context, *GetUserKBsRequest) (*GetUserKBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKBs not implemented")
}
func (UnimplementedGatewayServiceServer) ChangeKBName(context.Context, *ChangeKBNameRequest) (*ChangeKBNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKBName not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteKB(context.Context, *DeleteKBRequest) (*DeleteKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKB not implemented")
}
func (UnimplementedGatewayServiceServer) CreateKBFile(context.Context, *CreateKBFileRequest) (*CreateKBFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKBFile not implemented")
}
func (UnimplementedGatewayServiceServer) UpdateKBFile(context.Context, *UpdateKBFileRequest) (*UpdateKBFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKBFile not implemented")
}
func (UnimplementedGatewayServiceServer) GetKBFilesByFolder(context.Context, *GetKBFilesByFolderRequest) (*GetKBFilesByFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKBFilesByFolder not implemented")
}
func (UnimplementedGatewayServiceServer) GetKBWithKBFilesByKBID(context.Context, *GetKBWithKBFilesByKBIDRequest) (*GetKBWithKBFilesByKBIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKBWithKBFilesByKBID not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteKBFiles(context.Context, *DeleteKBFilesRequest) (*DeleteKBFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKBFiles not implemented")
}
func (UnimplementedGatewayServiceServer) AddFileToKB(context.Context, *AddFileToKBRequest) (*AddFileToKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFileToKB not implemented")
}
func (UnimplementedGatewayServiceServer) StartParseKBFile(context.Context, *StartParseKBFileRequest) (*StartParseKBFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartParseKBFile not implemented")
}
func (UnimplementedGatewayServiceServer) StartBuildKBFile(context.Context, *StartBuildKBFileRequest) (*StartBuildKBFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBuildKBFile not implemented")
}
func (UnimplementedGatewayServiceServer) StopBuildKBFile(context.Context, *StopBuildKBFileRequest) (*StopBuildKBFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBuildKBFile not implemented")
}
func (UnimplementedGatewayServiceServer) CreateFileAsset(context.Context, *CreateFileAssetRequest) (*CreateFileAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileAsset not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteFileAsset(context.Context, *DeleteFileAssetRequest) (*DeleteFileAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileAsset not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteFileAssetByKBFileID(context.Context, *DeleteFileAssetByKBFileIDRequest) (*DeleteFileAssetByKBFileIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileAssetByKBFileID not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteFileAssetByOwner(context.Context, *DeleteFileAssetByOwnerRequest) (*DeleteFileAssetByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileAssetByOwner not implemented")
}
func (UnimplementedGatewayServiceServer) GetFileAssetsByKBFileID(context.Context, *GetFileAssetsByKBFileIDRequest) (*GetFileAssetsByKBFileIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAssetsByKBFileID not implemented")
}
func (UnimplementedGatewayServiceServer) GetFigureByID(context.Context, *GetFigureByIDRequest) (*GetFigureByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigureByID not implemented")
}
func (UnimplementedGatewayServiceServer) UpsertRagConfig(context.Context, *UpsertRagConfigRequest) (*UpsertRagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRagConfig not implemented")
}
func (UnimplementedGatewayServiceServer) GetRagConfigByKBID(context.Context, *GetRagConfigByKBIDRequest) (*GetRagConfigByKBIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRagConfigByKBID not implemented")
}
func (UnimplementedGatewayServiceServer) ParseAndBuildKB(context.Context, *ParseAndBuildKBRequest) (*ParseAndBuildKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAndBuildKB not implemented")
}
func (UnimplementedGatewayServiceServer) QueryKBFigures(context.Context, *QueryKBFiguresRequest) (*QueryKBFiguresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKBFigures not implemented")
}
func (UnimplementedGatewayServiceServer) QueryKBTables(context.Context, *QueryKBTablesRequest) (*QueryKBTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKBTables not implemented")
}
func (UnimplementedGatewayServiceServer) QueryKBContext(context.Context, *QueryKBContextRequest) (*QueryKBContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKBContext not implemented")
}
func (UnimplementedGatewayServiceServer) GetKBGraph(context.Context, *GetKBGraphRequest) (*GetKBGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKBGraph not implemented")
}
func (UnimplementedGatewayServiceServer) UnlinkKBDocument(context.Context, *UnlinkKBDocumentRequest) (*UnlinkKBDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkKBDocument not implemented")
}
func (UnimplementedGatewayServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedGatewayServiceServer) AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToProject not implemented")
}
func (UnimplementedGatewayServiceServer) RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*RemoveUserFromProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromProject not implemented")
}
func (UnimplementedGatewayServiceServer) AddKBToProject(context.Context, *AddKBToProjectRequest) (*AddKBToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKBToProject not implemented")
}
func (UnimplementedGatewayServiceServer) RemoveKBFromProject(context.Context, *RemoveKBFromProjectRequest) (*RemoveKBFromProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKBFromProject not implemented")
}
func (UnimplementedGatewayServiceServer) RenameProject(context.Context, *RenameProjectRequest) (*RenameProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameProject not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserProjectsWithKBs(context.Context, *GetUserProjectsWithKBsRequest) (*GetUserProjectsWithKBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProjectsWithKBs not implemented")
}
func (UnimplementedGatewayServiceServer) ListUsersWithProjects(context.Context, *ListUsersWithProjectsRequest) (*ListUsersWithProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersWithProjects not implemented")
}
func (UnimplementedGatewayServiceServer) GetProjectWithUsersAndKBs(context.Context, *GetProjectWithUsersAndKBsRequest) (*GetProjectWithUsersAndKBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWithUsersAndKBs not implemented")
}
func (UnimplementedGatewayServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).LogoutUser(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetAllRoles(ctx, req.(*GetAllRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ActivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ActivateUser(ctx, req.(*ActivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserMe(ctx, req.(*MeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RenewAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RenewAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RenewAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RenewAccessToken(ctx, req.(*RenewAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetFileBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetFileBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetFileBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetFileBytes(ctx, req.(*GetFileBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Base64UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base64UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Base64UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Base64UploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Base64UploadFiles(ctx, req.(*Base64UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UploadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UploadChunk(ctx, req.(*UploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteFiles(ctx, req.(*DeleteFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListBucketFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListBucketFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListBucketFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListBucketFiles(ctx, req.(*ListBucketFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_NewFolderInBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFolderInBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).NewFolderInBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_NewFolderInBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).NewFolderInBucket(ctx, req.(*NewFolderInBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateKB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateKB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateKB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateKB(ctx, req.(*CreateKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserKBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserKBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserKBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserKBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserKBs(ctx, req.(*GetUserKBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ChangeKBName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKBNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ChangeKBName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ChangeKBName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ChangeKBName(ctx, req.(*ChangeKBNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteKB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteKB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteKB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteKB(ctx, req.(*DeleteKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateKBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKBFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateKBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateKBFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateKBFile(ctx, req.(*CreateKBFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateKBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKBFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateKBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpdateKBFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateKBFile(ctx, req.(*UpdateKBFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetKBFilesByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKBFilesByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetKBFilesByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetKBFilesByFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetKBFilesByFolder(ctx, req.(*GetKBFilesByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetKBWithKBFilesByKBID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKBWithKBFilesByKBIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetKBWithKBFilesByKBID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetKBWithKBFilesByKBID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetKBWithKBFilesByKBID(ctx, req.(*GetKBWithKBFilesByKBIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteKBFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKBFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteKBFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteKBFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteKBFiles(ctx, req.(*DeleteKBFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddFileToKB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileToKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddFileToKB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddFileToKB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddFileToKB(ctx, req.(*AddFileToKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_StartParseKBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartParseKBFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).StartParseKBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_StartParseKBFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).StartParseKBFile(ctx, req.(*StartParseKBFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_StartBuildKBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBuildKBFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).StartBuildKBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_StartBuildKBFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).StartBuildKBFile(ctx, req.(*StartBuildKBFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_StopBuildKBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBuildKBFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).StopBuildKBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_StopBuildKBFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).StopBuildKBFile(ctx, req.(*StopBuildKBFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateFileAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateFileAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateFileAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateFileAsset(ctx, req.(*CreateFileAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteFileAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteFileAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteFileAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteFileAsset(ctx, req.(*DeleteFileAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteFileAssetByKBFileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileAssetByKBFileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteFileAssetByKBFileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteFileAssetByKBFileID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteFileAssetByKBFileID(ctx, req.(*DeleteFileAssetByKBFileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteFileAssetByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileAssetByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteFileAssetByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteFileAssetByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteFileAssetByOwner(ctx, req.(*DeleteFileAssetByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetFileAssetsByKBFileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAssetsByKBFileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetFileAssetsByKBFileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetFileAssetsByKBFileID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetFileAssetsByKBFileID(ctx, req.(*GetFileAssetsByKBFileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetFigureByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFigureByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetFigureByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetFigureByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetFigureByID(ctx, req.(*GetFigureByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpsertRagConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpsertRagConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpsertRagConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpsertRagConfig(ctx, req.(*UpsertRagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetRagConfigByKBID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRagConfigByKBIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetRagConfigByKBID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetRagConfigByKBID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetRagConfigByKBID(ctx, req.(*GetRagConfigByKBIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ParseAndBuildKB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAndBuildKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ParseAndBuildKB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ParseAndBuildKB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ParseAndBuildKB(ctx, req.(*ParseAndBuildKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_QueryKBFigures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKBFiguresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).QueryKBFigures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_QueryKBFigures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).QueryKBFigures(ctx, req.(*QueryKBFiguresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_QueryKBTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKBTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).QueryKBTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_QueryKBTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).QueryKBTables(ctx, req.(*QueryKBTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_QueryKBContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKBContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).QueryKBContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_QueryKBContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).QueryKBContext(ctx, req.(*QueryKBContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetKBGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKBGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetKBGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetKBGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetKBGraph(ctx, req.(*GetKBGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UnlinkKBDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkKBDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UnlinkKBDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UnlinkKBDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UnlinkKBDocument(ctx, req.(*UnlinkKBDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddUserToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddUserToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddUserToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddUserToProject(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveUserFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveUserFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RemoveUserFromProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveUserFromProject(ctx, req.(*RemoveUserFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddKBToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKBToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddKBToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddKBToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddKBToProject(ctx, req.(*AddKBToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveKBFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKBFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveKBFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RemoveKBFromProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveKBFromProject(ctx, req.(*RemoveKBFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RenameProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RenameProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RenameProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RenameProject(ctx, req.(*RenameProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserProjectsWithKBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProjectsWithKBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserProjectsWithKBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserProjectsWithKBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserProjectsWithKBs(ctx, req.(*GetUserProjectsWithKBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListUsersWithProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersWithProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListUsersWithProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListUsersWithProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListUsersWithProjects(ctx, req.(*ListUsersWithProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetProjectWithUsersAndKBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWithUsersAndKBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetProjectWithUsersAndKBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetProjectWithUsersAndKBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetProjectWithUsersAndKBs(ctx, req.(*GetProjectWithUsersAndKBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _GatewayService_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _GatewayService_LogoutUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _GatewayService_CreateUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _GatewayService_CreateRole_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _GatewayService_GetAllRoles_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _GatewayService_DeleteRole_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _GatewayService_ActivateUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _GatewayService_DeactivateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _GatewayService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserMe",
			Handler:    _GatewayService_GetUserMe_Handler,
		},
		{
			MethodName: "RenewAccessToken",
			Handler:    _GatewayService_RenewAccessToken_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _GatewayService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _GatewayService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetFileBytes",
			Handler:    _GatewayService_GetFileBytes_Handler,
		},
		{
			MethodName: "Base64UploadFiles",
			Handler:    _GatewayService_Base64UploadFiles_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _GatewayService_UploadChunk_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _GatewayService_CompleteUpload_Handler,
		},
		{
			MethodName: "DeleteFiles",
			Handler:    _GatewayService_DeleteFiles_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _GatewayService_CreateBucket_Handler,
		},
		{
			MethodName: "ListBucketFiles",
			Handler:    _GatewayService_ListBucketFiles_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _GatewayService_DeleteBucket_Handler,
		},
		{
			MethodName: "NewFolderInBucket",
			Handler:    _GatewayService_NewFolderInBucket_Handler,
		},
		{
			MethodName: "CreateKB",
			Handler:    _GatewayService_CreateKB_Handler,
		},
		{
			MethodName: "GetUserKBs",
			Handler:    _GatewayService_GetUserKBs_Handler,
		},
		{
			MethodName: "ChangeKBName",
			Handler:    _GatewayService_ChangeKBName_Handler,
		},
		{
			MethodName: "DeleteKB",
			Handler:    _GatewayService_DeleteKB_Handler,
		},
		{
			MethodName: "CreateKBFile",
			Handler:    _GatewayService_CreateKBFile_Handler,
		},
		{
			MethodName: "UpdateKBFile",
			Handler:    _GatewayService_UpdateKBFile_Handler,
		},
		{
			MethodName: "GetKBFilesByFolder",
			Handler:    _GatewayService_GetKBFilesByFolder_Handler,
		},
		{
			MethodName: "GetKBWithKBFilesByKBID",
			Handler:    _GatewayService_GetKBWithKBFilesByKBID_Handler,
		},
		{
			MethodName: "DeleteKBFiles",
			Handler:    _GatewayService_DeleteKBFiles_Handler,
		},
		{
			MethodName: "AddFileToKB",
			Handler:    _GatewayService_AddFileToKB_Handler,
		},
		{
			MethodName: "StartParseKBFile",
			Handler:    _GatewayService_StartParseKBFile_Handler,
		},
		{
			MethodName: "StartBuildKBFile",
			Handler:    _GatewayService_StartBuildKBFile_Handler,
		},
		{
			MethodName: "StopBuildKBFile",
			Handler:    _GatewayService_StopBuildKBFile_Handler,
		},
		{
			MethodName: "CreateFileAsset",
			Handler:    _GatewayService_CreateFileAsset_Handler,
		},
		{
			MethodName: "DeleteFileAsset",
			Handler:    _GatewayService_DeleteFileAsset_Handler,
		},
		{
			MethodName: "DeleteFileAssetByKBFileID",
			Handler:    _GatewayService_DeleteFileAssetByKBFileID_Handler,
		},
		{
			MethodName: "DeleteFileAssetByOwner",
			Handler:    _GatewayService_DeleteFileAssetByOwner_Handler,
		},
		{
			MethodName: "GetFileAssetsByKBFileID",
			Handler:    _GatewayService_GetFileAssetsByKBFileID_Handler,
		},
		{
			MethodName: "GetFigureByID",
			Handler:    _GatewayService_GetFigureByID_Handler,
		},
		{
			MethodName: "UpsertRagConfig",
			Handler:    _GatewayService_UpsertRagConfig_Handler,
		},
		{
			MethodName: "GetRagConfigByKBID",
			Handler:    _GatewayService_GetRagConfigByKBID_Handler,
		},
		{
			MethodName: "ParseAndBuildKB",
			Handler:    _GatewayService_ParseAndBuildKB_Handler,
		},
		{
			MethodName: "QueryKBFigures",
			Handler:    _GatewayService_QueryKBFigures_Handler,
		},
		{
			MethodName: "QueryKBTables",
			Handler:    _GatewayService_QueryKBTables_Handler,
		},
		{
			MethodName: "QueryKBContext",
			Handler:    _GatewayService_QueryKBContext_Handler,
		},
		{
			MethodName: "GetKBGraph",
			Handler:    _GatewayService_GetKBGraph_Handler,
		},
		{
			MethodName: "UnlinkKBDocument",
			Handler:    _GatewayService_UnlinkKBDocument_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _GatewayService_CreateProject_Handler,
		},
		{
			MethodName: "AddUserToProject",
			Handler:    _GatewayService_AddUserToProject_Handler,
		},
		{
			MethodName: "RemoveUserFromProject",
			Handler:    _GatewayService_RemoveUserFromProject_Handler,
		},
		{
			MethodName: "AddKBToProject",
			Handler:    _GatewayService_AddKBToProject_Handler,
		},
		{
			MethodName: "RemoveKBFromProject",
			Handler:    _GatewayService_RemoveKBFromProject_Handler,
		},
		{
			MethodName: "RenameProject",
			Handler:    _GatewayService_RenameProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _GatewayService_DeleteProject_Handler,
		},
		{
			MethodName: "GetUserProjectsWithKBs",
			Handler:    _GatewayService_GetUserProjectsWithKBs_Handler,
		},
		{
			MethodName: "ListUsersWithProjects",
			Handler:    _GatewayService_ListUsersWithProjects_Handler,
		},
		{
			MethodName: "GetProjectWithUsersAndKBs",
			Handler:    _GatewayService_GetProjectWithUsersAndKBs_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _GatewayService_ListProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
