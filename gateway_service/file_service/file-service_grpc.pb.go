// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file-service.proto

package file_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_GetFilesUrl_FullMethodName       = "/file_service.FileService/GetFilesUrl"
	FileService_Base64UploadFiles_FullMethodName = "/file_service.FileService/Base64UploadFiles"
	FileService_SaveStringToFile_FullMethodName  = "/file_service.FileService/SaveStringToFile"
	FileService_UploadChunk_FullMethodName       = "/file_service.FileService/UploadChunk"
	FileService_CompleteUpload_FullMethodName    = "/file_service.FileService/CompleteUpload"
	FileService_GetFileBytes_FullMethodName      = "/file_service.FileService/GetFileBytes"
	FileService_GetFileText_FullMethodName       = "/file_service.FileService/GetFileText"
	FileService_DeleteFiles_FullMethodName       = "/file_service.FileService/DeleteFiles"
	FileService_CreateBucket_FullMethodName      = "/file_service.FileService/CreateBucket"
	FileService_BucketExists_FullMethodName      = "/file_service.FileService/BucketExists"
	FileService_ListBucketFiles_FullMethodName   = "/file_service.FileService/ListBucketFiles"
	FileService_NewFolderInBucket_FullMethodName = "/file_service.FileService/NewFolderInBucket"
	FileService_DeleteBucket_FullMethodName      = "/file_service.FileService/DeleteBucket"
	FileService_IsObjectExists_FullMethodName    = "/file_service.FileService/IsObjectExists"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	GetFilesUrl(ctx context.Context, in *GetFilesUrlRequest, opts ...grpc.CallOption) (*GetFilesUrlResponse, error)
	Base64UploadFiles(ctx context.Context, in *Base64UploadFilesRequest, opts ...grpc.CallOption) (*Base64UploadFilesResponse, error)
	SaveStringToFile(ctx context.Context, in *SaveStringToFileRequest, opts ...grpc.CallOption) (*SaveStringToFileResponse, error)
	UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error)
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	GetFileBytes(ctx context.Context, in *GetFileBytesRequest, opts ...grpc.CallOption) (*GetFileBytesResponse, error)
	GetFileText(ctx context.Context, in *GetFileTextRequest, opts ...grpc.CallOption) (*GetFileTextResponse, error)
	DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	BucketExists(ctx context.Context, in *BucketExistsRequest, opts ...grpc.CallOption) (*BucketExistsResponse, error)
	ListBucketFiles(ctx context.Context, in *ListBucketFilesRequest, opts ...grpc.CallOption) (*ListBucketFilesResponse, error)
	NewFolderInBucket(ctx context.Context, in *NewFolderInBucketRequest, opts ...grpc.CallOption) (*NewFolderInBucketResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	IsObjectExists(ctx context.Context, in *IsObjectExistsRequest, opts ...grpc.CallOption) (*IsObjectExistsResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GetFilesUrl(ctx context.Context, in *GetFilesUrlRequest, opts ...grpc.CallOption) (*GetFilesUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilesUrlResponse)
	err := c.cc.Invoke(ctx, FileService_GetFilesUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Base64UploadFiles(ctx context.Context, in *Base64UploadFilesRequest, opts ...grpc.CallOption) (*Base64UploadFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Base64UploadFilesResponse)
	err := c.cc.Invoke(ctx, FileService_Base64UploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SaveStringToFile(ctx context.Context, in *SaveStringToFileRequest, opts ...grpc.CallOption) (*SaveStringToFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveStringToFileResponse)
	err := c.cc.Invoke(ctx, FileService_SaveStringToFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadChunkResponse)
	err := c.cc.Invoke(ctx, FileService_UploadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, FileService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileBytes(ctx context.Context, in *GetFileBytesRequest, opts ...grpc.CallOption) (*GetFileBytesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileBytesResponse)
	err := c.cc.Invoke(ctx, FileService_GetFileBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileText(ctx context.Context, in *GetFileTextRequest, opts ...grpc.CallOption) (*GetFileTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileTextResponse)
	err := c.cc.Invoke(ctx, FileService_GetFileText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFilesResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, FileService_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) BucketExists(ctx context.Context, in *BucketExistsRequest, opts ...grpc.CallOption) (*BucketExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketExistsResponse)
	err := c.cc.Invoke(ctx, FileService_BucketExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListBucketFiles(ctx context.Context, in *ListBucketFilesRequest, opts ...grpc.CallOption) (*ListBucketFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketFilesResponse)
	err := c.cc.Invoke(ctx, FileService_ListBucketFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) NewFolderInBucket(ctx context.Context, in *NewFolderInBucketRequest, opts ...grpc.CallOption) (*NewFolderInBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewFolderInBucketResponse)
	err := c.cc.Invoke(ctx, FileService_NewFolderInBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) IsObjectExists(ctx context.Context, in *IsObjectExistsRequest, opts ...grpc.CallOption) (*IsObjectExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsObjectExistsResponse)
	err := c.cc.Invoke(ctx, FileService_IsObjectExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
type FileServiceServer interface {
	GetFilesUrl(context.Context, *GetFilesUrlRequest) (*GetFilesUrlResponse, error)
	Base64UploadFiles(context.Context, *Base64UploadFilesRequest) (*Base64UploadFilesResponse, error)
	SaveStringToFile(context.Context, *SaveStringToFileRequest) (*SaveStringToFileResponse, error)
	UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error)
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	GetFileBytes(context.Context, *GetFileBytesRequest) (*GetFileBytesResponse, error)
	GetFileText(context.Context, *GetFileTextRequest) (*GetFileTextResponse, error)
	DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	BucketExists(context.Context, *BucketExistsRequest) (*BucketExistsResponse, error)
	ListBucketFiles(context.Context, *ListBucketFilesRequest) (*ListBucketFilesResponse, error)
	NewFolderInBucket(context.Context, *NewFolderInBucketRequest) (*NewFolderInBucketResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	IsObjectExists(context.Context, *IsObjectExistsRequest) (*IsObjectExistsResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) GetFilesUrl(context.Context, *GetFilesUrlRequest) (*GetFilesUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesUrl not implemented")
}
func (UnimplementedFileServiceServer) Base64UploadFiles(context.Context, *Base64UploadFilesRequest) (*Base64UploadFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Base64UploadFiles not implemented")
}
func (UnimplementedFileServiceServer) SaveStringToFile(context.Context, *SaveStringToFileRequest) (*SaveStringToFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStringToFile not implemented")
}
func (UnimplementedFileServiceServer) UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedFileServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedFileServiceServer) GetFileBytes(context.Context, *GetFileBytesRequest) (*GetFileBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBytes not implemented")
}
func (UnimplementedFileServiceServer) GetFileText(context.Context, *GetFileTextRequest) (*GetFileTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileText not implemented")
}
func (UnimplementedFileServiceServer) DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedFileServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedFileServiceServer) BucketExists(context.Context, *BucketExistsRequest) (*BucketExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketExists not implemented")
}
func (UnimplementedFileServiceServer) ListBucketFiles(context.Context, *ListBucketFilesRequest) (*ListBucketFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketFiles not implemented")
}
func (UnimplementedFileServiceServer) NewFolderInBucket(context.Context, *NewFolderInBucketRequest) (*NewFolderInBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFolderInBucket not implemented")
}
func (UnimplementedFileServiceServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedFileServiceServer) IsObjectExists(context.Context, *IsObjectExistsRequest) (*IsObjectExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsObjectExists not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_GetFilesUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFilesUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFilesUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFilesUrl(ctx, req.(*GetFilesUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Base64UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base64UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Base64UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Base64UploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Base64UploadFiles(ctx, req.(*Base64UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SaveStringToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStringToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SaveStringToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SaveStringToFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SaveStringToFile(ctx, req.(*SaveStringToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_UploadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadChunk(ctx, req.(*UploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileBytes(ctx, req.(*GetFileBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileText(ctx, req.(*GetFileTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFiles(ctx, req.(*DeleteFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_BucketExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).BucketExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_BucketExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).BucketExists(ctx, req.(*BucketExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListBucketFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListBucketFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_ListBucketFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListBucketFiles(ctx, req.(*ListBucketFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_NewFolderInBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFolderInBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).NewFolderInBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_NewFolderInBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).NewFolderInBucket(ctx, req.(*NewFolderInBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_IsObjectExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsObjectExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).IsObjectExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_IsObjectExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).IsObjectExists(ctx, req.(*IsObjectExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilesUrl",
			Handler:    _FileService_GetFilesUrl_Handler,
		},
		{
			MethodName: "Base64UploadFiles",
			Handler:    _FileService_Base64UploadFiles_Handler,
		},
		{
			MethodName: "SaveStringToFile",
			Handler:    _FileService_SaveStringToFile_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _FileService_UploadChunk_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _FileService_CompleteUpload_Handler,
		},
		{
			MethodName: "GetFileBytes",
			Handler:    _FileService_GetFileBytes_Handler,
		},
		{
			MethodName: "GetFileText",
			Handler:    _FileService_GetFileText_Handler,
		},
		{
			MethodName: "DeleteFiles",
			Handler:    _FileService_DeleteFiles_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _FileService_CreateBucket_Handler,
		},
		{
			MethodName: "BucketExists",
			Handler:    _FileService_BucketExists_Handler,
		},
		{
			MethodName: "ListBucketFiles",
			Handler:    _FileService_ListBucketFiles_Handler,
		},
		{
			MethodName: "NewFolderInBucket",
			Handler:    _FileService_NewFolderInBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _FileService_DeleteBucket_Handler,
		},
		{
			MethodName: "IsObjectExists",
			Handler:    _FileService_IsObjectExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-service.proto",
}
