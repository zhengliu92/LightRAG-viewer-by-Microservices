// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	ActivateUser(ctx context.Context, id uuid.UUID) error
	AddFileToKB(ctx context.Context, arg AddFileToKBParams) error
	AddKBToProject(ctx context.Context, arg AddKBToProjectParams) error
	AddUserToProject(ctx context.Context, arg AddUserToProjectParams) error
	ChangeKBName(ctx context.Context, arg ChangeKBNameParams) (KnowledgeBase, error)
	ClearCurrentExpiredSessions(ctx context.Context) error
	CountKBsInProject(ctx context.Context, projectID uuid.UUID) (int64, error)
	CreateFileFigures(ctx context.Context, arg CreateFileFiguresParams) error
	CreateFileFullText(ctx context.Context, arg CreateFileFullTextParams) error
	CreateFileTables(ctx context.Context, arg CreateFileTablesParams) error
	CreateFileTexts(ctx context.Context, arg CreateFileTextsParams) error
	CreateKB(ctx context.Context, arg CreateKBParams) (KnowledgeBase, error)
	CreateKBFile(ctx context.Context, arg CreateKBFileParams) (KbFile, error)
	CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error)
	CreateRole(ctx context.Context, name string) (Role, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	CreateUserActivity(ctx context.Context, arg CreateUserActivityParams) error
	DeactivateUser(ctx context.Context, id uuid.UUID) error
	DeleteKB(ctx context.Context, id uuid.UUID) error
	DeleteKBFile(ctx context.Context, id uuid.UUID) error
	DeleteKBFileByPathAndOwnerID(ctx context.Context, arg DeleteKBFileByPathAndOwnerIDParams) error
	DeleteProject(ctx context.Context, id uuid.UUID) error
	DeleteRoleByName(ctx context.Context, name string) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	DeleteUserActivity(ctx context.Context, id uuid.UUID) error
	GetActivitiesByType(ctx context.Context, activityType string) ([]UserActivity, error)
	GetAllRoles(ctx context.Context) ([]Role, error)
	GetFileFigureByID(ctx context.Context, id uuid.UUID) (FileFigure, error)
	GetFileFiguresByKBFileID(ctx context.Context, kbFileID uuid.UUID) ([]FileFigure, error)
	GetFileFullTextByID(ctx context.Context, id uuid.UUID) (FileFullText, error)
	GetFileFullTextByKBFileID(ctx context.Context, kbFileID uuid.UUID) (FileFullText, error)
	GetFileTablesByKBFileID(ctx context.Context, kbFileID uuid.UUID) ([]FileTable, error)
	GetFileTextsByKBFileID(ctx context.Context, kbFileID uuid.UUID) ([]FileText, error)
	GetKB(ctx context.Context, id uuid.UUID) (KnowledgeBase, error)
	GetKBFile(ctx context.Context, id uuid.UUID) (KbFile, error)
	GetKBFileByOwnerAndPath(ctx context.Context, arg GetKBFileByOwnerAndPathParams) (GetKBFileByOwnerAndPathRow, error)
	GetKBFileMapping(ctx context.Context, arg GetKBFileMappingParams) (KbFileMapping, error)
	GetKBFilesByFolder(ctx context.Context, arg GetKBFilesByFolderParams) ([]KbFile, error)
	GetKBFilesByKBID(ctx context.Context, kbID uuid.UUID) ([]GetKBFilesByKBIDRow, error)
	GetKBFilesByOwner(ctx context.Context, ownerID uuid.UUID) ([]KbFile, error)
	GetKBFilesWithKBsByFolder(ctx context.Context, arg GetKBFilesWithKBsByFolderParams) ([]GetKBFilesWithKBsByFolderRow, error)
	GetKBWithKBFilesByKBID(ctx context.Context, id uuid.UUID) (GetKBWithKBFilesByKBIDRow, error)
	GetNumValidKBFilesByKBID(ctx context.Context, kbID uuid.UUID) (int64, error)
	GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error)
	GetProjectWithUsersAndKBs(ctx context.Context, id uuid.UUID) (GetProjectWithUsersAndKBsRow, error)
	GetRagConfigByKBID(ctx context.Context, id uuid.UUID) (GetRagConfigByKBIDRow, error)
	GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error)
	GetRoleByName(ctx context.Context, name string) (Role, error)
	GetSession(ctx context.Context, id uuid.UUID) (Session, error)
	GetUserActivitiesByUserID(ctx context.Context, userID uuid.UUID) ([]UserActivity, error)
	GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error)
	GetUserByUsername(ctx context.Context, username string) (User, error)
	GetUserKBs(ctx context.Context, ownerID uuid.UUID) ([]GetUserKBsRow, error)
	GetUserProjectsWithKBs(ctx context.Context, userID uuid.UUID) ([]GetUserProjectsWithKBsRow, error)
	IsKbAccessibleByUserID(ctx context.Context, arg IsKbAccessibleByUserIDParams) (bool, error)
	IsUserInProject(ctx context.Context, arg IsUserInProjectParams) (bool, error)
	ListJoinedProjects(ctx context.Context, userID uuid.UUID) ([]Project, error)
	ListProjects(ctx context.Context, userID uuid.UUID) ([]ListProjectsRow, error)
	ListUsersWithProjects(ctx context.Context) ([]ListUsersWithProjectsRow, error)
	RemoveFileFromKB(ctx context.Context, arg RemoveFileFromKBParams) error
	RemoveKBFromProject(ctx context.Context, arg RemoveKBFromProjectParams) error
	RemoveUserFromProject(ctx context.Context, arg RemoveUserFromProjectParams) error
	RenameProject(ctx context.Context, arg RenameProjectParams) error
	UpdateKBFile(ctx context.Context, arg UpdateKBFileParams) (KbFile, error)
	UpdateKBFileMapping(ctx context.Context, arg UpdateKBFileMappingParams) (KbFileMapping, error)
	UpdateRoleName(ctx context.Context, arg UpdateRoleNameParams) error
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	UpsertRagConfig(ctx context.Context, arg UpsertRagConfigParams) error
}

var _ Querier = (*Queries)(nil)
