// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_activity.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserActivity = `-- name: CreateUserActivity :exec
INSERT INTO "user_activity" (user_id, activity_type, details)
VALUES ($1, $2, $3)
`

type CreateUserActivityParams struct {
	UserID       uuid.UUID   `json:"user_id"`
	ActivityType string      `json:"activity_type"`
	Details      pgtype.Text `json:"details"`
}

func (q *Queries) CreateUserActivity(ctx context.Context, arg CreateUserActivityParams) error {
	_, err := q.db.Exec(ctx, createUserActivity, arg.UserID, arg.ActivityType, arg.Details)
	return err
}

const deleteUserActivity = `-- name: DeleteUserActivity :exec
DELETE FROM "user_activity"
WHERE id = $1
`

func (q *Queries) DeleteUserActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserActivity, id)
	return err
}

const getActivitiesByType = `-- name: GetActivitiesByType :many
SELECT id, user_id, activity_type, details, created_at
FROM "user_activity"
WHERE activity_type = $1
ORDER BY created_at DESC
`

func (q *Queries) GetActivitiesByType(ctx context.Context, activityType string) ([]UserActivity, error) {
	rows, err := q.db.Query(ctx, getActivitiesByType, activityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserActivity{}
	for rows.Next() {
		var i UserActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActivitiesByUserID = `-- name: GetUserActivitiesByUserID :many
SELECT id, user_id, activity_type, details, created_at
FROM "user_activity"
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserActivitiesByUserID(ctx context.Context, userID uuid.UUID) ([]UserActivity, error) {
	rows, err := q.db.Query(ctx, getUserActivitiesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserActivity{}
	for rows.Next() {
		var i UserActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
