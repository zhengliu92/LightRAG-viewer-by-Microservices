// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE "user"
SET is_active = TRUE, deleted_at = '0001-01-01 00:00:00Z'
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (email, username, hashed_password, role_name, phone)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, username, hashed_password, is_active, is_email_verified, last_login, password_changed_at, role_name, avatar, phone, created_at, deleted_at
`

type CreateUserParams struct {
	Email          string      `json:"email"`
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	RoleName       string      `json:"role_name"`
	Phone          pgtype.Text `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
		arg.RoleName,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.LastLogin,
		&i.PasswordChangedAt,
		&i.RoleName,
		&i.Avatar,
		&i.Phone,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE "user"
SET is_active = FALSE, deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, is_active, is_email_verified, last_login, created_at, role_name
FROM "user"
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID              uuid.UUID `json:"id"`
	Email           string    `json:"email"`
	Username        string    `json:"username"`
	IsActive        bool      `json:"is_active"`
	IsEmailVerified bool      `json:"is_email_verified"`
	LastLogin       time.Time `json:"last_login"`
	CreatedAt       time.Time `json:"created_at"`
	RoleName        string    `json:"role_name"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.LastLogin,
		&i.CreatedAt,
		&i.RoleName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, is_active, is_email_verified, last_login, created_at, role_name, phone
FROM "user"
WHERE id = $1
`

type GetUserByIDRow struct {
	ID              uuid.UUID   `json:"id"`
	Email           string      `json:"email"`
	Username        string      `json:"username"`
	IsActive        bool        `json:"is_active"`
	IsEmailVerified bool        `json:"is_email_verified"`
	LastLogin       time.Time   `json:"last_login"`
	CreatedAt       time.Time   `json:"created_at"`
	RoleName        string      `json:"role_name"`
	Phone           pgtype.Text `json:"phone"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.LastLogin,
		&i.CreatedAt,
		&i.RoleName,
		&i.Phone,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, hashed_password, is_active, is_email_verified, last_login, password_changed_at, role_name, avatar, phone, created_at, deleted_at
FROM "user"
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.LastLogin,
		&i.PasswordChangedAt,
		&i.RoleName,
		&i.Avatar,
		&i.Phone,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  avatar = COALESCE($3, avatar),
  email = COALESCE($4, email),
  phone = COALESCE($5, phone),
  is_email_verified = COALESCE($6, is_email_verified),
  last_login = COALESCE($7, last_login),
  role_name = COALESCE($8, role_name),
  is_active = COALESCE($9, is_active)
WHERE
  username = $10
RETURNING id, email, username, hashed_password, is_active, is_email_verified, last_login, password_changed_at, role_name, avatar, phone, created_at, deleted_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	Avatar            pgtype.Text        `json:"avatar"`
	Email             pgtype.Text        `json:"email"`
	Phone             pgtype.Text        `json:"phone"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	LastLogin         pgtype.Timestamptz `json:"last_login"`
	RoleName          pgtype.Text        `json:"role_name"`
	IsActive          pgtype.Bool        `json:"is_active"`
	Username          string             `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Avatar,
		arg.Email,
		arg.Phone,
		arg.IsEmailVerified,
		arg.LastLogin,
		arg.RoleName,
		arg.IsActive,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.LastLogin,
		&i.PasswordChangedAt,
		&i.RoleName,
		&i.Avatar,
		&i.Phone,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
