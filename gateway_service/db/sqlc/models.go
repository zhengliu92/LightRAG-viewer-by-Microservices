// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type FileFigure struct {
	ID         uuid.UUID `json:"id"`
	OwnerID    uuid.UUID `json:"owner_id"`
	Section    string    `json:"section"`
	KbFileID   uuid.UUID `json:"kb_file_id"`
	ImgPath    string    `json:"img_path"`
	Caption    string    `json:"caption"`
	PageNumber int32     `json:"page_number"`
}

type FileFullText struct {
	ID       uuid.UUID `json:"id"`
	OwnerID  uuid.UUID `json:"owner_id"`
	KbFileID uuid.UUID `json:"kb_file_id"`
	FullText string    `json:"full_text"`
}

type FileTable struct {
	ID         uuid.UUID `json:"id"`
	OwnerID    uuid.UUID `json:"owner_id"`
	Section    string    `json:"section"`
	KbFileID   uuid.UUID `json:"kb_file_id"`
	TableHtml  string    `json:"table_html"`
	Caption    string    `json:"caption"`
	PageNumber int32     `json:"page_number"`
}

type FileText struct {
	ID         uuid.UUID `json:"id"`
	OwnerID    uuid.UUID `json:"owner_id"`
	KbFileID   uuid.UUID `json:"kb_file_id"`
	Text       string    `json:"text"`
	Section    string    `json:"section"`
	PageNumber int32     `json:"page_number"`
}

type KbFile struct {
	ID              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	OwnerID         uuid.UUID `json:"owner_id"`
	Path            string    `json:"path"`
	Folder          string    `json:"folder"`
	Size            int64     `json:"size"`
	ParseStatus     string    `json:"parse_status"`
	IsParseFinished bool      `json:"is_parse_finished"`
	IsParseFailed   bool      `json:"is_parse_failed"`
	IsAssetsUpdated bool      `json:"is_assets_updated"`
	ParsePercentage float64   `json:"parse_percentage"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

type KbFileMapping struct {
	KbID            uuid.UUID `json:"kb_id"`
	KbFileID        uuid.UUID `json:"kb_file_id"`
	BuildStatus     string    `json:"build_status"`
	BuildPercentage float64   `json:"build_percentage"`
	IsBuildFinished bool      `json:"is_build_finished"`
	IsBuildFailed   bool      `json:"is_build_failed"`
	CreatedAt       time.Time `json:"created_at"`
}

type KnowledgeBase struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	OwnerID   uuid.UUID `json:"owner_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type KnowledgeBaseProjectMapping struct {
	KnowledgeBaseID uuid.UUID `json:"knowledge_base_id"`
	ProjectID       uuid.UUID `json:"project_id"`
}

type Project struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	OwnerID     uuid.UUID `json:"owner_id"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

type RagConfig struct {
	ID                    uuid.UUID `json:"id"`
	OwnerID               uuid.UUID `json:"owner_id"`
	KbID                  uuid.UUID `json:"kb_id"`
	EmbedModel            string    `json:"embed_model"`
	ChunkTokenSize        int32     `json:"chunk_token_size"`
	ChunkOverlapTokenSize int32     `json:"chunk_overlap_token_size"`
}

type Role struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	ID                uuid.UUID   `json:"id"`
	Email             string      `json:"email"`
	Username          string      `json:"username"`
	HashedPassword    string      `json:"hashed_password"`
	IsActive          bool        `json:"is_active"`
	IsEmailVerified   bool        `json:"is_email_verified"`
	LastLogin         time.Time   `json:"last_login"`
	PasswordChangedAt time.Time   `json:"password_changed_at"`
	RoleName          string      `json:"role_name"`
	Avatar            string      `json:"avatar"`
	Phone             pgtype.Text `json:"phone"`
	CreatedAt         time.Time   `json:"created_at"`
	DeletedAt         time.Time   `json:"deleted_at"`
}

type UserActivity struct {
	ID           uuid.UUID   `json:"id"`
	UserID       uuid.UUID   `json:"user_id"`
	ActivityType string      `json:"activity_type"`
	Details      pgtype.Text `json:"details"`
	CreatedAt    time.Time   `json:"created_at"`
}

type UserProjectMapping struct {
	UserID    uuid.UUID `json:"user_id"`
	ProjectID uuid.UUID `json:"project_id"`
}
